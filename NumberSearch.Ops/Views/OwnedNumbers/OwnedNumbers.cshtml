@using AccelerateNetworks.Operations
@model OwnedNumberResult[]
@{
    ViewData["Title"] = "Owned Phone Numbers";
}
<h1 class="display-4 p-3">🏢 Owned Numbers</h1>
<p>
    Total: <strong>@Model.Count()</strong> |
    Active: <strong>@Model.Where(x => x.Owned.Status is "Active").Count()</strong>
    Cancelled: <strong>@Model.Where(x => x.Owned.Status is "Cancelled").Count()</strong>
    Porting In: <strong>@Model.Where(x => x.Owned.Status is "Porting In").Count()</strong>
    Porting Out: <strong>@Model.Where(x => x.Owned.Status is "Porting Out").Count()</strong>
    |
    @{
        foreach (string provider in Model.Select(x => x.Owned.IngestedFrom).Distinct())
        {
            string numbersForProider = $"{provider}: <strong>{Model.Where(x => x.Owned.IngestedFrom == provider).Count()}</strong> ";
            @Html.Raw(numbersForProider)
            ;
        }
    }
</p>
<div class="table-responsive">
    <table class="table table-striped table-borderless table-hover" id="table">
        <thead>
            <tr>
                <th scope="col">Number</th>
                <th>E911</th>
                <th>FusionPBX</th>
                <th>Messaging</th>
                <th>Notes</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @{
                foreach (var number in Model.Where(x => x.Owned.IngestedFrom != "Test"))
                {
                    var ingestedBadge = number.Owned.IngestedFrom;
                    switch (number.Owned.IngestedFrom)
                    {
                        case "FirstPointCom":
                            ingestedBadge = "<h4><span class='badge bg-info'>FirstPointCom</span></h4>";
                            break;
                        case "BulkVS":
                            ingestedBadge = "<h4><span class='badge bg-primary'>BulkVS</span></h4>";
                            break;
                        case "TeleMessage":
                            ingestedBadge = "<h4><span class='badge bg-warning'>TeleMessage</span></h4>";
                            break;
                    }
                    <tr>
                        <td scope="row">
                            <h4>@number.Owned.DialedNumber</h4>
                            @{
                                if (number.Owned.Status is "Active")
                                {
                                    <h4><span class="badge bg-success">Active</span></h4>
                                }
                                else if (number.Owned.Status is "Cancelled")
                                {
                                    <h4><span class="badge bg-danger">Cancelled</span></h4>
                                }
                                else if (number.Owned.Status is "Porting In")
                                {
                                    <h4><span class="badge bg-info">Porting In</span></h4>
                                }
                                else if (number.Owned.Status is "Porting Out")
                                {
                                    <h4><span class="badge bg-warning">Porting Out</span></h4>
                                }
                                else
                                {
                                    <h4><span class="badge bg-secondary">@number.Owned.Status</span></h4>
                                }
                            }
                            @Html.Raw(ingestedBadge)
                            <p>
                                Last Updated
                                @number.Owned.DateUpdated.ToShortDateString()
                            </p>
                        </td>
                        <td>
                            @if (number?.EmergencyInformation.DialedNumber == number?.Owned.DialedNumber)
                            {
                                <p>
                                    Registered on @number?.EmergencyInformation.BulkVSLastModificationDate?.ToShortDateString()
                                </p>
                                <p>
                                    @number?.EmergencyInformation.CallerName
                                </p>
                                <p>
                                    @number?.EmergencyInformation.AddressLine1
                                    @number?.EmergencyInformation.AddressLine2
                                </p>
                                <p>
                                    @number?.EmergencyInformation.City
                                    @number?.EmergencyInformation.State
                                    @number?.EmergencyInformation.Zip
                                </p>
                                <p>
                                    Last verified on @number?.EmergencyInformation.ModifiedDate?.ToShortDateString()
                                </p>
                                //if (number?.Owned.EmergencyInformationId is not null)
                                //{
                                //    <a href="/Home/E911/@number.Owned.DialedNumber" class="btn btn-info text-light" target="_blank">
                                //        View Emergency Information
                                //    </a>
                                //}
                            }
                            else
                            {
                                // TODO: Add this number to your cart in MVC and bump you to the Orders page.
                                <p>No address registered.</p>
                            }
                        </td>
                        <td>
                            @if (!string.IsNullOrWhiteSpace(number?.Owned?.FPBXDomainName))
                            {
                                <p>@number?.Owned.FPBXDomainName</p>
                                <p>@number?.Owned.FPBXDomainDescription</p>
                                <p>DestinationId: @number?.Owned.FPBXDestinationId</p>
                            }
                            else
                            {
                                <p>No Destination found in FusionPBX.</p>
                                <p>No Domain found in FusionPBX.</p>
                            }
                        </td>
                        <td>
                            @if (string.IsNullOrWhiteSpace(number?.Owned?.SMSRoute) && string.IsNullOrWhiteSpace(@number?.ClientRegistration?.CallbackUrl))
                            {
                                <p>No upstream routing found.</p>
                                <p>No message forwarding URL registered.</p>
                            }
                            else if (string.IsNullOrWhiteSpace(number?.Owned?.SMSRoute) && !string.IsNullOrWhiteSpace(@number?.ClientRegistration?.CallbackUrl))
                            {
                                <p>❌ No upstream routing found.</p>
                                <p>✔️ Forwarded to @number?.ClientRegistration?.CallbackUrl</p>
                                <div class="alert alert-warning" role="alert">
                                    Inbound messages will not be forwarded. Please register with sms.callpipe.com.
                                </div>
                            }
                            else if (!string.IsNullOrWhiteSpace(number?.Owned?.SMSRoute) && string.IsNullOrWhiteSpace(@number?.ClientRegistration?.CallbackUrl))
                            {
                                <p>✔️ Routed to @number?.Owned.SMSRoute</p>
                                <p>❌ No message forwarding URL registered.</p>
                                <div class="alert alert-warning" role="alert">
                                    Inbound messages will not be forwarded. Please register with sms.callpipe.com.
                                </div>
                            }
                            else
                            {
                                <p>✔️ Routed to @number?.Owned.SMSRoute</p>
                                <p>✔️ Forwarded to @number?.ClientRegistration?.CallbackUrl</p>
                            }
                        </td>
                        <td>
                            @if (!string.IsNullOrWhiteSpace(number?.Owned.OwnedBy))
                            {
                                <p>Owned by @number.Owned.OwnedBy</p>
                            }
                            <p>@number?.Owned.Notes</p>
                        </td>
                        <td>
                            <div class="btn-group-vertical" role="group" aria-label="Vertical button group">
                                <a class="btn btn-warning text-light" href="/Home/OwnedNumbers/@number?.Owned.DialedNumber" target="_blank">Edit</a>
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>
<div class="row">
    <div class="col">
        <a class="btn btn-danger" href="/Messaging/TwilioCarrier?refreshAll=true">Refresh Carrier Name for all Numbers without Carrier Name ($)</a>
        <a class="btn btn-primary" href="/OwnedNumbers/ExportToCSV">Export to CSV</a>
    </div>
</div>
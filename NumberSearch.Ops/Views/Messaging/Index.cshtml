@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model MessagingResult

@{
    ViewData["Title"] = "Messaging";
}
<div class="d-flex justify-content-between align-items-center">
    <h1 class="display-4 p-3">✉️ Messaging</h1>
</div>
@if (!string.IsNullOrWhiteSpace(Model?.Message))
{
    if (string.IsNullOrWhiteSpace(Model?.AlertType))
    {
        <div class="alert alert-danger col-12" role="alert">
            @Model?.Message
        </div>
    }
    else
    {
        var alertType = Model?.AlertType ?? "alert-danger";
        <div class="alert @alertType col-12" role="alert">
            @Model?.Message
        </div>
    }
}
<form action="/Messaging/Register" method="post" class="needs-validation">
    @Html.AntiForgeryToken()
    <h4 class="mb-3">Register a Phone Number for Messaging Service</h4>
    <div class="row">
        <div class="col">
            <div class="form-floating mb-3">
                <input asp-for="RegistrationRequest.DialedNumber" type="text" class="form-control" placeholder="The phone number you want to register.">
                <label for="phoneNumber">Phone Number</label>
            </div>
        </div>
        <div class="col">
            <div class="form-floating mb-3">
                <input asp-for="RegistrationRequest.CallbackUrl" type="text" class="form-control" placeholder="The webhook Url that you want inbound messages forwarded to.">
                <label for="callbackUrl">Callback URL</label>
            </div>
        </div>
        <div class="col">
            <div class="form-floating mb-3">
                <input asp-for="RegistrationRequest.ClientSecret" type="text" class="form-control" placeholder="The secret that will be required for validating messages to and from the registered client.">
                <label for="clientSecret">Client Secret</label>
            </div>
            <div class="col">
                <div class="d-grid gap-2">
                    <button type="submit" class="btn btn-outline-danger btn-block">Register</button>
                </div>
            </div>
        </div>

    </div>
</form>
<h3 class="pt-3">Messaging Usage by Phone Number</h3>
<div class="table-responsive">
    <table class="table table-striped table-borderless table-hover">
        <thead>
            <tr>
                <th>Phone Number</th>
                <th>Outbound MMS</th>
                <th>Outbound SMS</th>
                <th>Inbound SMS</th>
                <th>Inbound MMS</th>
                <th>Registered Upstream?</th>
                <th>Upstream Status Description</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var result in Model.UsageSummary)
            {
                var checkParse = PhoneNumbersNA.PhoneNumber.TryParse(result.AsDialed, out var phoneNumber);
                var ownedPhoneNumber = Model.Owned.FirstOrDefault(x => x.DialedNumber == phoneNumber.DialedNumber);
                string AsDialedLink = checkParse && ownedPhoneNumber is not null ? $"<a href='/Home/OwnedNumbers/{ownedPhoneNumber.DialedNumber}' target='_blank'>{result.AsDialed}</a>" : result.AsDialed;

                <tr>
                    <td>@Html.Raw(AsDialedLink)</td>
                    <td>@result.OutboundMMSCount</td>
                    <td>@result.OutboundSMSCount</td>
                    <td>@result.InboundSMSCount</td>
                    <td>@result.InboundMMSCount</td>
                    @if (result.AsDialed is not "Total")
                    {
                        <td>@result.RegisteredUpstream</td>
                        <td>@result.UpstreamStatusDescription</td>
                        <td>
                            <a class="btn btn-primary" href="./RefreshStatus?dialedNumber=@result.AsDialed">Refresh Upstream</a>
                            <a class="btn btn-primary" href="./Register?dialedNumber=@result.AsDialed">Reregister</a>
                        </td>
                    }
                    else
                    {
                        <td></td>
                        <td></td>
                        <td>As of @DateTime.Now.ToShortDateString() @DateTime.Now.ToShortTimeString()</td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>
<h3>Failed Messages in the Last 3 Days</h3>
<ul>
    @foreach (var failed in Model.FailedMessages.GroupBy(x => x.To).OrderByDescending(x => x.Count()))
    {
        var number = failed.FirstOrDefault()?.To;
        var checkParse = PhoneNumbersNA.PhoneNumber.TryParse(number ?? string.Empty, out var phoneNumber);
        if (checkParse && phoneNumber is not null && !string.IsNullOrWhiteSpace(number))
        {
            var ownedPhoneNumber = Model.Owned.FirstOrDefault(x => x.DialedNumber == phoneNumber.DialedNumber);
            string AsDialedLink = checkParse && ownedPhoneNumber is not null ? $"<a href='/Home/OwnedNumbers/{ownedPhoneNumber.DialedNumber}' target='_blank'>{number}</a>" : number;
            var usage = Model.UsageSummary.FirstOrDefault(x => x.AsDialed == number);
            string email = ownedPhoneNumber.
            string registered = usage is not null ? $"Registered with sms.callpipe.com. {usage.RegisteredUpstream} Upstream Status: {usage.UpstreamStatusDescription} <a href='./Register?dialedNumber={phoneNumber.DialedNumber}'>Reregister</a>" 
            : $"Not registered with sms.callpipe.com. <a href='mailto:'>Upsell them with this email.</a>";
            <li>
                @Html.Raw(AsDialedLink) has @failed.Count() failed messages. @Html.Raw(registered)
            </li>
        }
        else
        {
            <li>
                @number has @failed.Count() failed messages. File a GitHub issue for these so Tom can figure out why we're not recording a To number.
            </li>
        }
    }
</ul>

<div class="table-responsive">
    <table class="table table-striped table-borderless table-hover" id="table">
        <thead>
            <tr>
                @*  <th>Succeeded?</th> *@
                <th>Date Received PST</th>
                <th>Message Source</th>
                <th>Message Type</th>
                <th>From</th>
                <th>To</th>
                <th>Raw Response</th>
                <th>Content</th>
                @* <th>Media URLs</th> *@
                @*<th>Raw Request</th>
                <th>To Forward</th> *@
            </tr>
        </thead>
        <tbody>
            @foreach (var result in Model.FailedMessages)
            {
                var checkParse = PhoneNumbersNA.PhoneNumber.TryParse(result.From, out var fromPhoneNumber);
                var ownedPhoneNumber = Model.Owned.FirstOrDefault(x => x.DialedNumber == fromPhoneNumber.DialedNumber);
                string FromLink = checkParse && ownedPhoneNumber is not null ? $"<a href='/Home/OwnedNumbers/{ownedPhoneNumber.DialedNumber}' target='_blank'>{result.From}</a>" : result.From;
                checkParse = PhoneNumbersNA.PhoneNumber.TryParse(result.To, out var toPhoneNumber);
                ownedPhoneNumber = Model.Owned.FirstOrDefault(x => x.DialedNumber == toPhoneNumber.DialedNumber);
                string ToLink = checkParse && ownedPhoneNumber is not null ? $"<a href='/Home/OwnedNumbers/{ownedPhoneNumber.DialedNumber}' target='_blank'>{result.To}</a>" : result.To;

                <tr>
                    @*<td>@result.Succeeded</td>*@
                    <td data-order="@result.DateReceivedUTC.Ticks">@result.DateReceivedUTC.ToLocalTime().ToShortDateString() @result.DateReceivedUTC.ToLocalTime().ToShortTimeString()</td>
                    <td>@result.MessageSource</td>
                    <td>@result.MessageType</td>
                    <td>@Html.Raw(FromLink)</td>
                    <td>@Html.Raw(ToLink)</td>
                    <td>@result.RawResponse</td>
                    <td>@result.Content</td>
                    @* <td>@result.MediaURLs</td> *@
                    @*<td>@result.RawRequest</td>
                <td>@result.ToForward</td> *@
                </tr>
            }
        </tbody>
    </table>
</div>
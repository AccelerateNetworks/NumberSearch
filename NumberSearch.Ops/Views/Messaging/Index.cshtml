@using System.Web;
@using ZLinq
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model MessagingResult

@{
    ViewData["Title"] = "Messaging";
}
<div class="d-flex justify-content-between align-items-center">
    <h1 class="display-4 p-3">✉️ Messaging</h1>
</div>
@if (!string.IsNullOrWhiteSpace(Model?.Message))
{
    if (string.IsNullOrWhiteSpace(Model?.AlertType))
    {
        <div class="alert alert-danger col-12" role="alert">
            @Model?.Message
        </div>
    }
    else
    {
        var alertType = Model?.AlertType ?? "alert-danger";
        <div class="alert @alertType col-12" role="alert">
            @Model?.Message
        </div>
    }
}
<form action="/Messaging/Register" method="post" class="needs-validation">
    @Html.AntiForgeryToken()
    <h4 class="mb-3">Register a Phone Number for Messaging Service</h4>
    <div class="row">
        <div class="col">
            <p>Phone Numbers registered for messaging service using this method are registered against sms.callpipe.com. After being received from the upstream vendor they will be forwarded along with the Client Secret to the Callback URL you set here. The client app can then use the Client Secret to verify that the incoming messages are legitimate.</p>
        </div>
        <div class="col">
            <div class="form-floating mb-3">
                <input asp-for="RegistrationRequest.DialedNumber" type="text" class="form-control" placeholder="The phone number you want to register.">
                <label for="phoneNumber">Phone Number</label>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="RegistrationRequest.CallbackUrl" type="text" class="form-control" placeholder="The webhook Url that you want inbound messages forwarded to.">
                <label for="callbackUrl">Callback URL</label>
            </div>
        </div>
        <div class="col">
            <div class="form-floating mb-3">
                <input asp-for="RegistrationRequest.ClientSecret" type="text" class="form-control" placeholder="The secret that will be required for validating messages to and from the registered client.">
                <label for="clientSecret">Client Secret</label>
            </div>
            <div class="col">
                <div class="d-grid gap-2">
                    <button type="submit" class="btn btn-outline-danger btn-block">Register</button>
                </div>
            </div>
        </div>

    </div>
</form>
<form action="/Messaging/ToEmail" method="post" class="needs-validation">
    @Html.AntiForgeryToken()
    <h4 class="mb-3">Register a Phone Number for Messaging to Email Service</h4>
    <div class="row">
        <div class="col">
            <p>Phone Numbers that are registered for service using this method will be enabled for SMS service and routed to our EPID with our upstream vendor. Messaging to email routed numbers will not show up in the list of active users below nor will messages show up in FusionPBX or *.sms.callpipe.com.</p>
        </div>
        <div class="col">
            <div class="form-floating mb-3">
                <input asp-for="ToEmail.DialedNumber" type="text" class="form-control" placeholder="The phone number you want to register.">
                <label for="phoneNumber">Phone Number</label>
            </div>
        </div>
        <div class="col">
            <div class="form-floating mb-3">
                <input asp-for="ToEmail.Email" type="email" class="form-control" placeholder="The email that the messages will be forwarded to.">
                <label for="clientSecret">Email Address</label>
            </div>
            <div class="col">
                <div class="d-grid gap-2">
                    <button type="submit" class="btn btn-outline-danger btn-block">Register</button>
                </div>
            </div>
        </div>
    </div>
</form>
<h3 class="pt-3">Messaging Usage by Phone Number</h3>
<div class="table-responsive">
    <table class="table table-striped table-bordered table-hover" id="table">
        <thead>
            <tr>
                <th>Phone Number</th>
                <th>Registered Upstream?</th>
                <th>Upstream Status Description</th>
                <th>Carrier Name</th>
                <th>Trunk Group</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (Model?.ClientRegistrations is not null && Model.ClientRegistrations.Length != 0)
            {
                foreach (var result in Model.ClientRegistrations)
                {
                    var checkParse = PhoneNumbersNA.PhoneNumber.TryParse(result.AsDialed, out var phoneNumber);
                    var ownedPhoneNumber = Model.Owned.AsValueEnumerable().FirstOrDefault(x => x.DialedNumber == phoneNumber.DialedNumber);
                    string AsDialedLink = checkParse && ownedPhoneNumber is not null && ownedPhoneNumber.Active ? $"<a href='/Home/OwnedNumbers/{ownedPhoneNumber.DialedNumber}' target='_blank'>{result.AsDialed}</a>" : $"<a class='btn btn-danger' href='/Messaging/Remove?dialedNumber={result.AsDialed}' target='_blank'> Remove {result.AsDialed}</a>";
                    string Carrier = checkParse && ownedPhoneNumber is not null ? ownedPhoneNumber?.TwilioCarrierName ?? "No Data" : "No Data";
                    string TrunkGroup = checkParse && ownedPhoneNumber is not null ? ownedPhoneNumber?.TrunkGroup ?? "No Data" : "No Data";
                    <tr>
                        <td>@Html.Raw(AsDialedLink)</td>
                        <td>@result.RegisteredUpstream</td>
                        <td>@result.UpstreamStatusDescription</td>
                        <td>@Carrier</td>
                        <td>@TrunkGroup</td>
                        <td>
                            <div class="btn-group">
                                <a class="btn btn-primary" href="/Messaging/RefreshStatus?dialedNumber=@result.AsDialed">Refresh Upstream</a>
                                <a class="btn btn-primary" href="/Messaging/Reregister?dialedNumber=@result.AsDialed">Reregister</a>
                                <a class="btn btn-primary" href="/Messaging/TwilioCarrier?dialedNumber=@result.AsDialed">Refresh Carrier</a>
                            </div>

                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>
<div class="row">
    <form method="post" action="/Messaging/RefreshCarrier">
        <div class="col-6">
            <div class="input-group mb-3">
                @Html.AntiForgeryToken()
                <span class="input-group-text" id="basic-addon3">Refresh Carrier Name for Numbers with </span>
                <input asp-for="CarrierName" type="text" class="form-control" list="datalistOptions" id="carrierName" placeholder="Type to search...">
                <datalist id="datalistOptions">
                    <option value="All"></option>
                    @if (Model?.Owned is not null && Model.Owned.Length != 0)
                    {
                        foreach (var carrier in Model.Owned.Where(x => x.IngestedFrom != "Test" && x.Active).Select(x => x.TwilioCarrierName).Distinct())
                        {
                            <option value='@carrier'>@Model.Owned.AsValueEnumerable().Where(x => x.IngestedFrom != "Test" && x.Active && x.TwilioCarrierName == carrier).Count()</option>
                        }
                    }
                </datalist>
                <button class="btn btn-danger" type="submit">As the Carrier ($)</button>
            </div>
        </div>
        <div class="col">
            @*         <a class="btn btn-danger" href="/Messaging/TwilioCarrier?refreshAll=true">Refresh Carrier Name for all Numbers without Carrier Name ($)</a>
            *@        <a class="btn btn-primary" href="/Messaging/ExportToCSV">Export to CSV</a>
        </div>
    </form>
</div>
@using System.Web;
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model MessagingResult

@{
    ViewData["Title"] = "Messaging";
}
<div class="d-flex justify-content-between align-items-center">
    <h1 class="display-4 p-3">✉️ Messaging</h1>
</div>
@if (!string.IsNullOrWhiteSpace(Model?.Message))
{
    if (string.IsNullOrWhiteSpace(Model?.AlertType))
    {
        <div class="alert alert-danger col-12" role="alert">
            @Model?.Message
        </div>
    }
    else
    {
        var alertType = Model?.AlertType ?? "alert-danger";
        <div class="alert @alertType col-12" role="alert">
            @Model?.Message
        </div>
    }
}
<form action="/Messaging/Register" method="post" class="needs-validation">
    @Html.AntiForgeryToken()
    <h4 class="mb-3">Register a Phone Number for Messaging Service</h4>
    <div class="row">
        <div class="col">
            <div class="form-floating mb-3">
                <input asp-for="RegistrationRequest.DialedNumber" type="text" class="form-control" placeholder="The phone number you want to register.">
                <label for="phoneNumber">Phone Number</label>
            </div>
        </div>
        <div class="col">
            <div class="form-floating mb-3">
                <input asp-for="RegistrationRequest.CallbackUrl" type="text" class="form-control" placeholder="The webhook Url that you want inbound messages forwarded to.">
                <label for="callbackUrl">Callback URL</label>
            </div>
        </div>
        <div class="col">
            <div class="form-floating mb-3">
                <input asp-for="RegistrationRequest.ClientSecret" type="text" class="form-control" placeholder="The secret that will be required for validating messages to and from the registered client.">
                <label for="clientSecret">Client Secret</label>
            </div>
            <div class="col">
                <div class="d-grid gap-2">
                    <button type="submit" class="btn btn-outline-danger btn-block">Register</button>
                </div>
            </div>
        </div>

    </div>
</form>
<form action="/Messaging/ToEmail" method="post" class="needs-validation">
    @Html.AntiForgeryToken()
    <h4 class="mb-3">Register a Phone Number for Messaging to Email Service</h4>
    <div class="row">
        <div class="col">
            <p>Phone Numbers that are registered for service using this method must already be enabled for SMS service and routed to our EPID with our upstream vendor. The numbers that are registered for this messaging to email service will not show up in the list of active users below as they are not registered against sms.callpipe.com but rather against the upstream vendor.</p>
        </div>
        <div class="col">
            <div class="form-floating mb-3">
                <input asp-for="ToEmail.DialedNumber" type="text" class="form-control" placeholder="The phone number you want to register.">
                <label for="phoneNumber">Phone Number</label>
            </div>
        </div>
        <div class="col">
            <div class="form-floating mb-3">
                <input asp-for="ToEmail.Email" type="email" class="form-control" placeholder="The email that the messages will be forwarded to.">
                <label for="clientSecret">Email Address</label>
            </div>
            <div class="col">
                <div class="d-grid gap-2">
                    <button type="submit" class="btn btn-outline-danger btn-block">Register</button>
                </div>
            </div>
        </div>

    </div>
</form>
<h3 class="pt-3">Messaging Usage by Phone Number</h3>
<div class="table-responsive">
    <table class="table table-striped table-borderless table-hover" id="table">
        <thead>
            <tr>
                <th>Phone Number</th>
                <th>Registered Upstream?</th>
                <th>Upstream Status Description</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var result in Model.ClientRegistrations)
            {
                var checkParse = PhoneNumbersNA.PhoneNumber.TryParse(result.AsDialed, out var phoneNumber);
                var ownedPhoneNumber = Model.Owned.FirstOrDefault(x => x.DialedNumber == phoneNumber.DialedNumber);
                string AsDialedLink = checkParse && ownedPhoneNumber is not null ? $"<a href='/Home/OwnedNumbers/{ownedPhoneNumber.DialedNumber}' target='_blank'>{result.AsDialed}</a>" : result.AsDialed;

                <tr>
                    <td>@Html.Raw(AsDialedLink)</td>
                    <td>@result.RegisteredUpstream</td>
                    <td>@result.UpstreamStatusDescription</td>
                    <td>
                        <a class="btn btn-primary" href="./RefreshStatus?dialedNumber=@result.AsDialed">Refresh Upstream</a>
                        <a class="btn btn-primary" href="./Register?dialedNumber=@result.AsDialed">Reregister</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
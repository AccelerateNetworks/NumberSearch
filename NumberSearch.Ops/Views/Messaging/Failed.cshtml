@using System.Web;
@using ZLinq
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model MessagingResult

@{
    ViewData["Title"] = "Messaging";
}
<div class="d-flex justify-content-between align-items-center">
    <h1 class="display-4 p-3">✉️ Messaging</h1>
</div>
@if (!string.IsNullOrWhiteSpace(Model?.Message))
{
    if (string.IsNullOrWhiteSpace(Model?.AlertType))
    {
        <div class="alert alert-danger col-12" role="alert">
            @Model?.Message
        </div>
    }
    else
    {
        var alertType = Model?.AlertType ?? "alert-danger";
        <div class="alert @alertType col-12" role="alert">
            @Model?.Message
        </div>
    }
}
<h3>Failed Inbound Messages in the Last 3 Days</h3>
@{
    var inbound = Model?.FailedMessages.Where(x => x.MessageSource is Models.MessageSource.Incoming).GroupBy(x => x.To).OrderByDescending(x => x.Count());
    if (inbound is not null && inbound.Count() > 0)
    {
        <ul>
            @foreach (var failed in inbound.AsValueEnumerable())
            {
                var number = failed.AsValueEnumerable().FirstOrDefault()?.To;
                var checkParse = PhoneNumbersNA.PhoneNumber.TryParse(number ?? string.Empty, out var phoneNumber);
                if (checkParse && !string.IsNullOrWhiteSpace(number) && Model is not null)
                {
                    var ownedPhoneNumber = Model.Owned.AsValueEnumerable().FirstOrDefault(x => x.DialedNumber == phoneNumber.DialedNumber);
                    string AsDialedLink = checkParse && ownedPhoneNumber is not null ? $"<a href='/Home/OwnedNumbers/{ownedPhoneNumber.DialedNumber}' target='_blank'>{number}</a>" : number;
                    var usage = Model.ClientRegistrations.AsValueEnumerable().FirstOrDefault(x => x.AsDialed == number);
                    string newLine = HttpUtility.UrlEncode(System.Environment.NewLine);
                    string email = "support@acceleratenetworks.com";
                    string subject = $"{failed.Count()} Messages received for {number}";
                    string body = $"Hi there,{newLine}{newLine}We have received the following messages for {number}. This number is not currently enrolled in our Web Texting service.{newLine}";
                    foreach (var message in failed)
                    {
                        // 2000 char limit
                        if (body.Length < 1000)
                        {
                            body = $@"{body.Trim()}{newLine}From {message.From} on {message.DateReceivedUTC.ToShortDateString()} at {message.DateReceivedUTC.ToShortTimeString()}:{newLine}{message.Content.Replace(@"\", @"\\").Replace("&", "and").Replace("?", "").Replace("=", "")}{newLine}";
                        }
                    }
                    body = $"{body}{newLine}To enroll in web texting for this phone number please respond to this email.{newLine}{newLine}";
                    @if (usage is not null)
                    {
                        <li>
                            @Html.Raw(AsDialedLink) has @failed.AsValueEnumerable().Count() failed messages.
                            Registered with sms.callpipe.com. @usage.RegisteredUpstream
                            Upstream Status: @usage.UpstreamStatusDescription
                            <a href='./Register?dialedNumber={@phoneNumber.DialedNumber}'>Reregister</a>
                        </li>
                    }
                    else
                    {
                        <li>
                            @Html.Raw(AsDialedLink) has @failed.AsValueEnumerable().Count() failed messages.
                            Not registered with sms.callpipe.com.
                            <a href="mailto:@email?subject=@subject&body=@body&cc=support@acceleratenetworks.com">Upsell them with this email.</a>
                        </li>
                    }
                }
                else
                {
                    <li>
                        @number has @failed.AsValueEnumerable().Count() failed messages. File a GitHub issue for these so Tom can figure out why we're not recording a To number.
                    </li>
                }
            }
        </ul>
    }
    else
    {
        <p>No failed inbound messages found. 🥳</p>
    }
}
<h3>Failed Outbound Messages in the Last 3 Days</h3>
@{
    var outbound = Model?.FailedMessages.Where(x => x.MessageSource is Models.MessageSource.Outgoing).GroupBy(x => x.To).OrderByDescending(x => x.Count());
    if (outbound is not null && outbound.Count() > 0)
    {
        <ul>
            @foreach (var failed in outbound.AsValueEnumerable())
            {
                var number = failed.AsValueEnumerable().FirstOrDefault()?.To;
                var checkParse = PhoneNumbersNA.PhoneNumber.TryParse(number ?? string.Empty, out var phoneNumber);
                if (checkParse && !string.IsNullOrWhiteSpace(number) && Model is not null)
                {
                    var ownedPhoneNumber = Model.Owned.AsValueEnumerable().FirstOrDefault(x => x.DialedNumber == phoneNumber.DialedNumber);
                    string AsDialedLink = checkParse && ownedPhoneNumber is not null ? $"<a href='/Home/OwnedNumbers/{ownedPhoneNumber.DialedNumber}' target='_blank'>{number}</a>" : number;
                    var usage = Model.ClientRegistrations.AsValueEnumerable().FirstOrDefault(x => x.AsDialed == number);

                    @if (usage is not null)
                    {
                        <li>
                            @Html.Raw(AsDialedLink) has @failed.AsValueEnumerable().Count() failed messages.
                            Registered with sms.callpipe.com. @usage.RegisteredUpstream
                            Upstream Status: @usage.UpstreamStatusDescription
                            <a href='./Register?dialedNumber={@phoneNumber.DialedNumber}'>Reregister</a>
                        </li>
                    }
                    else
                    {
                        <li>
                            @Html.Raw(AsDialedLink) has @failed.AsValueEnumerable().Count() failed messages.
                            Not registered with sms.callpipe.com.
                        </li>
                    }
                }
                else
                {
                    <li>
                        @number has @failed.AsValueEnumerable().Count() failed messages. File a GitHub issue for these so Tom can figure out why we're not recording a To number.
                        <p>@System.Text.Json.JsonSerializer.Serialize(failed)</p>
                    </li>
                }
            }
        </ul>
    }
    else
    {
        <p>No failed outbound messages found. 🥳</p>
    }
}

<div class="table-responsive">
    <table class="table table-striped table-bordered table-hover" id="table">
        <thead>
            <tr>
                @*  <th>Succeeded?</th> *@
                <th>Date Received PST</th>
                <th>Message Source</th>
                <th>Message Type</th>
                <th>From</th>
                <th>To</th>
                <th>Raw Response</th>
                <th>Content</th>
                @* <th>Media URLs</th> *@
                @*<th>Raw Request</th>
                <th>To Forward</th> *@
            </tr>
        </thead>
        <tbody>
            @if (Model?.FailedMessages is not null && Model.FailedMessages.Length > 0)
            {
                foreach (var result in Model.FailedMessages)
                {
                    var checkParse = PhoneNumbersNA.PhoneNumber.TryParse(result.From, out var fromPhoneNumber);
                    var ownedPhoneNumber = Model.Owned.AsValueEnumerable().FirstOrDefault(x => x.DialedNumber == fromPhoneNumber.DialedNumber);
                    string FromLink = checkParse && ownedPhoneNumber is not null ? $"<a href='/Home/OwnedNumbers/{ownedPhoneNumber.DialedNumber}' target='_blank'>{result.From}</a>" : result.From;
                    checkParse = PhoneNumbersNA.PhoneNumber.TryParse(result.To, out var toPhoneNumber);
                    ownedPhoneNumber = Model.Owned.AsValueEnumerable().FirstOrDefault(x => x.DialedNumber == toPhoneNumber.DialedNumber);
                    string ToLink = checkParse && ownedPhoneNumber is not null ? $"<a href='/Home/OwnedNumbers/{ownedPhoneNumber.DialedNumber}' target='_blank'>{result.To}</a>" : result.To;

                    <tr>
                        @*<td>@result.Succeeded</td>*@
                        <td data-order="@result.DateReceivedUTC.Ticks">@result.DateReceivedUTC.ToLocalTime().ToShortDateString() @result.DateReceivedUTC.ToLocalTime().ToShortTimeString()</td>
                        <td>@result.MessageSource</td>
                        <td>@result.MessageType</td>
                        <td>@Html.Raw(FromLink)</td>
                        <td>@Html.Raw(ToLink)</td>
                        <td>@result.RawResponse</td>
                        <td>@result.Content</td>
                        @* <td>@result.MediaURLs</td> *@
                        @*<td>@result.RawRequest</td>
                <td>@result.ToForward</td> *@
                    </tr>
                }
            }
        </tbody>
    </table>
</div>
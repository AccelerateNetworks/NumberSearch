@using System.Web;
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model MessagingResult

@{
    ViewData["Title"] = "Messaging";
}
<div class="d-flex justify-content-between align-items-center">
    <h1 class="display-4 p-3">✉️ Messaging</h1>
</div>
@if (!string.IsNullOrWhiteSpace(Model?.Message))
{
    if (string.IsNullOrWhiteSpace(Model?.AlertType))
    {
        <div class="alert alert-danger col-12" role="alert">
            @Model?.Message
        </div>
    }
    else
    {
        var alertType = Model?.AlertType ?? "alert-danger";
        <div class="alert @alertType col-12" role="alert">
            @Model?.Message
        </div>
    }
}
<h3>Failed Messages in the Last 3 Days</h3>
<ul>
    @foreach (var failed in Model.FailedMessages.GroupBy(x => x.To).OrderByDescending(x => x.Count()))
    {
        var number = failed.FirstOrDefault()?.To;
        var checkParse = PhoneNumbersNA.PhoneNumber.TryParse(number ?? string.Empty, out var phoneNumber);
        if (checkParse && phoneNumber is not null && !string.IsNullOrWhiteSpace(number))
        {
            var ownedPhoneNumber = Model.Owned.FirstOrDefault(x => x.DialedNumber == phoneNumber.DialedNumber);
            string AsDialedLink = checkParse && ownedPhoneNumber is not null ? $"<a href='/Home/OwnedNumbers/{ownedPhoneNumber.DialedNumber}' target='_blank'>{number}</a>" : number;
            var usage = Model.UsageSummary.FirstOrDefault(x => x.AsDialed == number);
            string newLine = HttpUtility.UrlEncode(System.Environment.NewLine);
            string email = "support@acceleratenetworks.com";
            string subject = $"{failed.Count()} Messages received for {number}";
            string body = $"Hi there,{newLine}{newLine}We have received the follow messages for {number}. This number is not currently enrolled in our Web Texting service.{newLine}";
            foreach (var message in failed)
            {
                // 2000 char limit
                if (body.Length < 1000)
                {
                    body = $@"{body.Trim()}{newLine}From {message.From} on {message.DateReceivedUTC.ToShortDateString()} at {message.DateReceivedUTC.ToShortTimeString()}:{newLine}{message.Content.Replace(@"\",@"\\").Replace("&", "and").Replace("?","").Replace("=","")}{newLine}";
                }
            }
            body = $"{body}{newLine}To enroll in web texting for this phone number please respond to this email.{newLine}{newLine}Thanks!{newLine}Accelerate Networks{newLine}206-858-8747";
            @if (usage is not null)
            {
                <li>
                    @Html.Raw(AsDialedLink) has @failed.Count() failed messages.
                    Registered with sms.callpipe.com. @usage.RegisteredUpstream
                    Upstream Status: @usage.UpstreamStatusDescription
                    <a href='./Register?dialedNumber={@phoneNumber.DialedNumber}'>Reregister</a>
                </li>
            }
            else
            {
                <li>
                    @Html.Raw(AsDialedLink) has @failed.Count() failed messages.
                    Not registered with sms.callpipe.com.
                    <a href="mailto:@email?subject=@subject&body=@body&cc=support@acceleratenetworks.com">Upsell them with this email.</a>
                </li>
            }
        }
        else
        {
            <li>
                @number has @failed.Count() failed messages. File a GitHub issue for these so Tom can figure out why we're not recording a To number.
            </li>
        }
    }
</ul>

<div class="table-responsive">
    <table class="table table-striped table-borderless table-hover" id="table">
        <thead>
            <tr>
                @*  <th>Succeeded?</th> *@
                <th>Date Received PST</th>
                <th>Message Source</th>
                <th>Message Type</th>
                <th>From</th>
                <th>To</th>
                <th>Raw Response</th>
                <th>Content</th>
                @* <th>Media URLs</th> *@
                @*<th>Raw Request</th>
                <th>To Forward</th> *@
            </tr>
        </thead>
        <tbody>
            @foreach (var result in Model.FailedMessages)
            {
                var checkParse = PhoneNumbersNA.PhoneNumber.TryParse(result.From, out var fromPhoneNumber);
                var ownedPhoneNumber = Model.Owned.FirstOrDefault(x => x.DialedNumber == fromPhoneNumber.DialedNumber);
                string FromLink = checkParse && ownedPhoneNumber is not null ? $"<a href='/Home/OwnedNumbers/{ownedPhoneNumber.DialedNumber}' target='_blank'>{result.From}</a>" : result.From;
                checkParse = PhoneNumbersNA.PhoneNumber.TryParse(result.To, out var toPhoneNumber);
                ownedPhoneNumber = Model.Owned.FirstOrDefault(x => x.DialedNumber == toPhoneNumber.DialedNumber);
                string ToLink = checkParse && ownedPhoneNumber is not null ? $"<a href='/Home/OwnedNumbers/{ownedPhoneNumber.DialedNumber}' target='_blank'>{result.To}</a>" : result.To;

                <tr>
                    @*<td>@result.Succeeded</td>*@
                    <td data-order="@result.DateReceivedUTC.Ticks">@result.DateReceivedUTC.ToLocalTime().ToShortDateString() @result.DateReceivedUTC.ToLocalTime().ToShortTimeString()</td>
                    <td>@result.MessageSource</td>
                    <td>@result.MessageType</td>
                    <td>@Html.Raw(FromLink)</td>
                    <td>@Html.Raw(ToLink)</td>
                    <td>@result.RawResponse</td>
                    <td>@result.Content</td>
                    @* <td>@result.MediaURLs</td> *@
                    @*<td>@result.RawRequest</td>
                <td>@result.ToForward</td> *@
                </tr>
            }
        </tbody>
    </table>
</div>
@model NumberSearch.Ops.SearchResults;

@{
    ViewData["Title"] = "Home Page";

    var searchText = string.Empty;
    if (Model?.Query != null)
    {
        searchText = Model.Query;
    }
}

<h1 class="display-4 p-3">☎️ Available Numbers</h1>
<div class="jumbotron mb-3">
    <h1 class="display-4 text-center">Numbers for all your needs!</h1>
    <p class="text-center"> Use * to pad your search, for example ***word to search for a number containing word, but exclude the area code. Conversely, 206******* will find 206 area code numbers.</p>
    <form class="form-row justify-content-center" action="/Numbers">
        <div class="form-group">
            <div class="input-group mx-auto input-group-lg">
                <div class="input-group-prepend">
                    <span class="input-group-text">+1</span>
                </div>
                <input type="text" name="Query" class="form-control" placeholder="Enter a Phone Number" value="@searchText">
                <button type="submit" class="btn btn-success pr-4 pl-4" onclick="displayBusyIndicator(this)">Search</button>
            </div>
        </div>
    </form>
</div>

@*<partial name="_LoadingPartial" />*@

@{
    if (Model != null && Model?.PhoneNumbers?.Length > 0)
    {
        var total = $"{Model.NumberOfResults} available numbers found!";
        <div class="alert alert-success" role="alert">
            @total
        </div>
        <div class="table-responsive">
            <table class="table table-striped table-borderless table-hover">
                <thead>
                    <tr>
                        <th>
                            Number
                        </th>
                        <th>
                            Dialed
                        </th>
                        <th>
                            Location
                        </th>
                        <th>
                            Ingested
                        </th>
                        <th>
                            Actions
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        var match = Model?.CleanQuery.Replace("*", string.Empty);
                        foreach (var item in Model?.PhoneNumbers)
                        {
                            var location = $"{item?.City ?? "Unknown City"}, {item?.State ?? "Unknown State"}";
                            var formattedNumber = $"({item.NPA}) {item.NXX}-{item.XXXX.ToString("0000")}";
                            var number = item.DialedNumber;
                            if (item.DialedNumber.Contains(match))
                            {
                                var start = item.DialedNumber.IndexOf(match);
                                var stop = match.Length;
                                var beginning = item.DialedNumber.Substring(0, start);
                                var middle = item.DialedNumber.Substring(start, stop);
                                var end = item.DialedNumber.Substring(start + stop);
                                number = $"{beginning}<b class='text-success'>{middle}</b>{end}";
                            }
                            var ingestedBadge = item.IngestedFrom;
                            switch (item.IngestedFrom)
                            {
                                case "FirstPointCom":
                                    ingestedBadge = "<span class='badge badge-info'>FirstPointCom</span>";
                                    break;
                                case "BulkVS":
                                    ingestedBadge = "<span class='badge badge-primary'>BulkVS</span>";
                                    break;
                                case "TeleMessage":
                                    ingestedBadge = "<span class='badge badge-warning'>TeleMessage</span>";
                                    break;
                            }
                            var elapsed = DateTime.Now - item.DateIngested;
                            <tr>
                                <td scope="row"><h4>@formattedNumber</h4></td>
                                <td>@Html.Raw(number)</td>
                                <td>@location</td>
                                <td>From @Html.Raw(ingestedBadge) on @item.DateIngested (@elapsed.Hours Hours ago)</td>
                                <td>
                                    <a href="https://acceleratenetworks.com/Search?Query=@item.DialedNumber" class="btn btn-primary" target="_blank" rel="noopener noreferrer">
                                        Public
                                    </a>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
        <form action="/Search">
            <div class="btn-group" role="group" aria-label="pagination">
                @{
                    var maxPage = Model.NumberOfResults / 100;
                    if ((Model.NumberOfResults % 100) > 1)
                    {
                        maxPage += 1;
                    }
                    if (Model.Page > 1)
                    {
                        var previousPage = Model.Page - 1;
                        <a class="btn btn-outline-secondary" onclick="displayBusyIndicator(this)" href="/Numbers?Query=@Model.Query&Page=@previousPage">Previous</a>
                        <a class="btn btn-outline-dark disabled">Page @Model.Page of @maxPage</a>
                    }
                    else
                    {
                        <a class="btn btn-outline-secondary disabled">Previous</a>
                        <a class="btn btn-outline-dark disabled">Page @Model.Page of @maxPage</a>
                    }
                    var pageResultsCount = Model.Page * 100;
                    if (Model.NumberOfResults > pageResultsCount)
                    {
                        var nextPage = Model.Page + 1;
                        <a class="btn btn-outline-secondary" onclick="displayBusyIndicator(this)" href="/Numbers?Query=@Model.Query&Page=@nextPage">Next</a>
                    }
                    else
                    {
                        <a class="btn btn-outline-secondary disabled">Next</a>
                    }
                }
            </div>
        </form>
    }
    else if (Model != null && Model?.PhoneNumbers?.Length == 0)
    {
        <div class="alert alert-danger" role="alert">
            No available numbers found!
        </div>
    }
}

<br />
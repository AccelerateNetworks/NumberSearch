// <auto-generated />
using System;
using AccelerateNetworks.Operations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AccelerateNetworks.Operations.Migrations
{
    [DbContext(typeof(numberSearchContext))]
    partial class numberSearchContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccelerateNetworks.Operations.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique();

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique();

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.Carrier", b =>
                {
                    b.Property<Guid>("CarrierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Color")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Lec")
                        .HasColumnType("character varying")
                        .HasColumnName("LEC");

                    b.Property<string>("Lectype")
                        .HasColumnType("character varying")
                        .HasColumnName("LECType");

                    b.Property<string>("LogoLink")
                        .HasColumnType("character varying");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<string>("Ocn")
                        .HasColumnType("character varying")
                        .HasColumnName("OCN");

                    b.Property<string>("Ratecenter")
                        .HasColumnType("character varying");

                    b.Property<string>("Spid")
                        .HasColumnType("character varying")
                        .HasColumnName("SPID");

                    b.Property<string>("Type")
                        .HasColumnType("character varying");

                    b.HasKey("CarrierId");

                    b.ToTable("Carriers");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.Coupon", b =>
                {
                    b.Property<Guid>("CouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<bool>("Public")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .HasColumnType("character varying");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("CouponId");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.EmergencyInformation", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnType("character varying");

                    b.Property<string>("AlertGroup")
                        .HasColumnType("character varying");

                    b.Property<string>("City")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateIngested")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DialedNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid>("EmergencyInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("FullName")
                        .HasColumnType("character varying");

                    b.Property<string>("IngestedFrom")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Note")
                        .HasColumnType("character varying");

                    b.Property<string>("State")
                        .HasColumnType("character varying");

                    b.Property<string>("TeliId")
                        .HasColumnType("character varying");

                    b.Property<string>("UnitNumber")
                        .HasColumnType("character varying");

                    b.Property<string>("UnitType")
                        .HasColumnType("character varying");

                    b.Property<string>("Zip")
                        .HasColumnType("character varying");

                    b.ToTable("EmergencyInformation", (string)null);
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.ExtensionRegistration", b =>
                {
                    b.Property<Guid>("ExtensionRegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("character varying");

                    b.Property<int?>("ExtensionNumber")
                        .HasColumnType("integer");

                    b.Property<string>("ModelOfPhone")
                        .HasColumnType("character varying");

                    b.Property<string>("NameOrLocation")
                        .HasColumnType("character varying");

                    b.Property<Guid>("NewClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("OutboundCallerId")
                        .HasColumnType("character varying");

                    b.HasKey("ExtensionRegistrationId");

                    b.ToTable("ExtensionRegistrations");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.FollowMeRegistration", b =>
                {
                    b.Property<Guid>("FollowMeRegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("CellPhoneNumber")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("NewClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("NumberOrExtension")
                        .HasColumnType("character varying");

                    b.Property<string>("UnreachablePhoneNumber")
                        .HasColumnType("character varying");

                    b.HasKey("FollowMeRegistrationId");

                    b.ToTable("FollowMeRegistrations");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.Ingest", b =>
                {
                    b.Property<string>("Exception")
                        .HasColumnType("text")
                        .HasColumnName("exception");

                    b.Property<string>("Level")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("level");

                    b.Property<string>("MachineName")
                        .HasColumnType("text")
                        .HasColumnName("machine_name");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("MessageTemplate")
                        .HasColumnType("text")
                        .HasColumnName("message_template");

                    b.Property<string>("Properties")
                        .HasColumnType("jsonb")
                        .HasColumnName("properties");

                    b.Property<string>("PropsTest")
                        .HasColumnType("jsonb")
                        .HasColumnName("props_test");

                    b.Property<DateTime?>("RaiseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("raise_date");

                    b.ToTable("Ingest", "Logs");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.Ingest1", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("FailedToIngest")
                        .HasColumnType("bigint");

                    b.Property<string>("IngestedFrom")
                        .HasColumnType("character varying");

                    b.Property<long>("IngestedNew")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Lock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("false");

                    b.Property<long>("NumbersRetrived")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("false");

                    b.Property<long>("Removed")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("Unchanged")
                        .HasColumnType("bigint");

                    b.Property<long>("UpdatedExisting")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Ingests", (string)null);
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.IngestCycle", b =>
                {
                    b.Property<Guid>("IngestCycleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<TimeSpan>("CycleTime")
                        .HasColumnType("interval");

                    b.Property<bool?>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("false");

                    b.Property<string>("IngestedFrom")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("RunNow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("false");

                    b.HasKey("IngestCycleId");

                    b.ToTable("IngestCycles");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.IntercomRegistration", b =>
                {
                    b.Property<Guid>("IntercomRegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ExtensionRecievingIntercom")
                        .HasColumnType("integer");

                    b.Property<int?>("ExtensionSendingIntercom")
                        .HasColumnType("integer");

                    b.Property<Guid>("NewClientId")
                        .HasColumnType("uuid");

                    b.HasKey("IntercomRegistrationId");

                    b.ToTable("IntercomRegistrations");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.Mvc", b =>
                {
                    b.Property<string>("Exception")
                        .HasColumnType("text")
                        .HasColumnName("exception");

                    b.Property<string>("Level")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("level");

                    b.Property<string>("MachineName")
                        .HasColumnType("text")
                        .HasColumnName("machine_name");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("MessageTemplate")
                        .HasColumnType("text")
                        .HasColumnName("message_template");

                    b.Property<string>("Properties")
                        .HasColumnType("jsonb")
                        .HasColumnName("properties");

                    b.Property<string>("PropsTest")
                        .HasColumnType("jsonb")
                        .HasColumnName("props_test");

                    b.Property<DateTime?>("RaiseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("raise_date");

                    b.ToTable("Mvc", "Logs");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.NewClient", b =>
                {
                    b.Property<Guid>("NewClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("AfterHoursVoicemail")
                        .HasColumnType("character varying");

                    b.Property<string>("BillingClientId")
                        .HasColumnType("character varying");

                    b.Property<string>("BusinessHours")
                        .HasColumnType("character varying");

                    b.Property<bool>("CustomHoldMusic")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HoldMusicDescription")
                        .HasColumnType("character varying");

                    b.Property<bool>("Intercom")
                        .HasColumnType("boolean");

                    b.Property<string>("IntercomDescription")
                        .HasColumnType("character varying");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<bool>("OverheadPaging")
                        .HasColumnType("boolean");

                    b.Property<string>("OverheadPagingDescription")
                        .HasColumnType("character varying");

                    b.Property<bool>("PhoneMenu")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneOfflineInstructions")
                        .HasColumnType("character varying");

                    b.Property<string>("PhonesToRingOrMenuDescription")
                        .HasColumnType("character varying");

                    b.Property<bool>("SpeedDial")
                        .HasColumnType("boolean");

                    b.Property<bool>("TextingService")
                        .HasColumnType("boolean");

                    b.Property<string>("TextingServiceName")
                        .HasColumnType("character varying");

                    b.HasKey("NewClientId");

                    b.ToTable("NewClients");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.NumberDescription", b =>
                {
                    b.Property<Guid>("NumberDescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<Guid>("NewClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("character varying");

                    b.Property<string>("Prefix")
                        .HasColumnType("character varying");

                    b.HasKey("NumberDescriptionId");

                    b.ToTable("NumberDescriptions");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Address")
                        .HasColumnType("character varying");

                    b.Property<string>("Address2")
                        .HasColumnType("character varying");

                    b.Property<string>("AddressUnitNumber")
                        .HasColumnType("character varying");

                    b.Property<string>("AddressUnitType")
                        .HasColumnType("character varying");

                    b.Property<bool>("BackgroundWorkCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("BillingClientId")
                        .HasColumnType("character varying");

                    b.Property<string>("BillingInvoiceId")
                        .HasColumnType("character varying");

                    b.Property<string>("BillingInvoiceReoccuringId")
                        .HasColumnType("character varying");

                    b.Property<string>("BusinessName")
                        .HasColumnType("character varying");

                    b.Property<string>("City")
                        .HasColumnType("character varying");

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomerNotes")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateSubmitted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("E911serviceNumber")
                        .HasColumnType("character varying")
                        .HasColumnName("E911ServiceNumber");

                    b.Property<string>("Email")
                        .HasColumnType("character varying");

                    b.Property<string>("FirstName")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("InstallDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("character varying");

                    b.Property<Guid?>("MergedOrderId")
                        .HasColumnType("uuid");

                    b.Property<bool>("OnsiteInstallation")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Quote")
                        .HasColumnType("boolean");

                    b.Property<string>("ReoccuringInvoiceLink")
                        .HasColumnType("character varying");

                    b.Property<string>("SalesEmail")
                        .HasColumnType("character varying");

                    b.Property<string>("State")
                        .HasColumnType("character varying");

                    b.Property<string>("UnparsedAddress")
                        .HasColumnType("character varying");

                    b.Property<string>("UpfrontInvoiceLink")
                        .HasColumnType("character varying");

                    b.Property<string>("Zip")
                        .HasColumnType("character varying");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.OwnedPhoneNumber", b =>
                {
                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("BillingClientId")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("DateIngested")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DialedNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid?>("EmergencyInformationId")
                        .HasColumnType("uuid");

                    b.Property<string>("IngestedFrom")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("Lidbcnam")
                        .HasColumnType("character varying")
                        .HasColumnName("LIDBCNAM");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("OwnedBy")
                        .HasColumnType("character varying");

                    b.Property<Guid>("OwnedPhoneNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Spid")
                        .HasColumnType("character varying")
                        .HasColumnName("SPID");

                    b.Property<string>("Spidname")
                        .HasColumnType("character varying")
                        .HasColumnName("SPIDName");

                    b.ToTable("OwnedPhoneNumbers");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.PhoneMenuOption", b =>
                {
                    b.Property<Guid>("PhoneMenuOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("MenuOption")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("NewClientId")
                        .HasColumnType("uuid");

                    b.HasKey("PhoneMenuOptionId");

                    b.ToTable("PhoneMenuOptions");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.PhoneNumber", b =>
                {
                    b.Property<string>("DialedNumber")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("City")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("DateIngested")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IngestedFrom")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int>("Npa")
                        .HasColumnType("integer")
                        .HasColumnName("NPA");

                    b.Property<string>("NumberType")
                        .HasColumnType("character varying");

                    b.Property<int>("Nxx")
                        .HasColumnType("integer")
                        .HasColumnName("NXX");

                    b.Property<bool>("Purchased")
                        .HasColumnType("boolean");

                    b.Property<string>("State")
                        .HasColumnType("character varying");

                    b.Property<int>("Xxxx")
                        .HasColumnType("integer")
                        .HasColumnName("XXXX");

                    b.HasKey("DialedNumber")
                        .HasName("PhoneNumbers_pkey");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.PhoneNumberLookup", b =>
                {
                    b.Property<Guid>("PhoneNumberLookupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("CarrierId")
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("DateIngested")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DialedNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<string>("IngestedFrom")
                        .HasColumnType("character varying");

                    b.Property<string>("Jurisdiction")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("LastPorted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Lata")
                        .HasColumnType("character varying")
                        .HasColumnName("LATA");

                    b.Property<string>("Lec")
                        .HasColumnType("character varying")
                        .HasColumnName("LEC");

                    b.Property<string>("Lectype")
                        .HasColumnType("character varying")
                        .HasColumnName("LECType");

                    b.Property<string>("Lidbname")
                        .HasColumnType("character varying")
                        .HasColumnName("LIDBName");

                    b.Property<bool>("Local")
                        .HasColumnType("boolean");

                    b.Property<string>("Lrn")
                        .HasColumnType("character varying")
                        .HasColumnName("LRN");

                    b.Property<string>("Ocn")
                        .HasColumnType("character varying")
                        .HasColumnName("OCN");

                    b.Property<string>("Ratecenter")
                        .HasColumnType("character varying");

                    b.Property<string>("Spid")
                        .HasColumnType("character varying")
                        .HasColumnName("SPID");

                    b.Property<string>("State")
                        .HasColumnType("character varying");

                    b.HasKey("PhoneNumberLookupId");

                    b.ToTable("PhoneNumberLookups");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.PortedPhoneNumber", b =>
                {
                    b.Property<Guid>("PortedPhoneNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("City")
                        .HasColumnType("character varying");

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DateFirmOrderCommitment")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateIngested")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExternalPortRequestId")
                        .HasColumnType("character varying");

                    b.Property<string>("IngestedFrom")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int>("Npa")
                        .HasColumnType("integer")
                        .HasColumnName("NPA");

                    b.Property<int>("Nxx")
                        .HasColumnType("integer")
                        .HasColumnName("NXX");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PortRequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("PortedDialedNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("RawResponse")
                        .HasColumnType("character varying");

                    b.Property<string>("RequestStatus")
                        .HasColumnType("character varying");

                    b.Property<string>("State")
                        .HasColumnType("character varying");

                    b.Property<bool?>("Wireless")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("false");

                    b.Property<int>("Xxxx")
                        .HasColumnType("integer")
                        .HasColumnName("XXXX");

                    b.HasKey("PortedPhoneNumberId");

                    b.ToTable("PortedPhoneNumbers");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.PortRequest", b =>
                {
                    b.Property<Guid>("PortRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Address")
                        .HasColumnType("character varying");

                    b.Property<string>("Address2")
                        .HasColumnType("character varying");

                    b.Property<string>("BillImageFileType")
                        .HasColumnType("character varying");

                    b.Property<string>("BillImagePath")
                        .HasColumnType("character varying");

                    b.Property<string>("BillingPhone")
                        .HasColumnType("character varying");

                    b.Property<string>("BusinessContact")
                        .HasColumnType("character varying");

                    b.Property<string>("BusinessName")
                        .HasColumnType("character varying");

                    b.Property<string>("CallerId")
                        .HasColumnType("character varying");

                    b.Property<string>("City")
                        .HasColumnType("character varying");

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateSubmitted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LocationType")
                        .HasColumnType("character varying");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<bool>("PartialPort")
                        .HasColumnType("boolean");

                    b.Property<string>("PartialPortDescription")
                        .HasColumnType("character varying");

                    b.Property<string>("ProviderAccountNumber")
                        .HasColumnType("character varying");

                    b.Property<string>("ProviderPin")
                        .HasColumnType("character varying")
                        .HasColumnName("ProviderPIN");

                    b.Property<string>("RequestStatus")
                        .HasColumnType("character varying");

                    b.Property<string>("ResidentialFirstName")
                        .HasColumnType("character varying");

                    b.Property<string>("ResidentialLastName")
                        .HasColumnType("character varying");

                    b.Property<string>("State")
                        .HasColumnType("character varying");

                    b.Property<string>("TeliId")
                        .HasColumnType("character varying");

                    b.Property<string>("VendorSubmittedTo")
                        .HasColumnType("character varying");

                    b.Property<bool>("WirelessNumber")
                        .HasColumnType("boolean");

                    b.Property<string>("Zip")
                        .HasColumnType("character varying");

                    b.HasKey("PortRequestId");

                    b.ToTable("PortRequests");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<int?>("DisplayPriority")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .HasColumnType("character varying");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<string>("Price")
                        .HasColumnType("character varying");

                    b.Property<bool>("Public")
                        .HasColumnType("boolean");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("integer");

                    b.Property<string>("SupportLink")
                        .HasColumnType("character varying");

                    b.Property<string>("Type")
                        .HasColumnType("character varying");

                    b.Property<string>("VendorPartNumber")
                        .HasColumnType("character varying");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.ProductOrder", b =>
                {
                    b.Property<Guid>("ProductOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("CouponId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DialedNumber")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("PortedDialedNumber")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid?>("PortedPhoneNumberId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VerifiedPhoneNumberId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductOrderId");

                    b.ToTable("ProductOrders");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.ProductShipment", b =>
                {
                    b.Property<Guid>("ProductShipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("BillingClientId")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("money");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("ShipmentSource")
                        .HasColumnType("character varying");

                    b.Property<string>("ShipmentType")
                        .HasColumnType("character varying");

                    b.HasKey("ProductShipmentId");

                    b.ToTable("ProductShipments");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.PurchasedPhoneNumber", b =>
                {
                    b.Property<bool>("Completed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DateIngested")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateOrdered")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DialedNumber")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("IngestedFrom")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int?>("Npa")
                        .HasColumnType("integer")
                        .HasColumnName("NPA");

                    b.Property<string>("NumberType")
                        .HasColumnType("character varying");

                    b.Property<int?>("Nxx")
                        .HasColumnType("integer")
                        .HasColumnName("NXX");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("OrderResponse")
                        .HasColumnType("character varying");

                    b.Property<string>("Pin")
                        .HasColumnType("character varying")
                        .HasColumnName("PIN");

                    b.Property<Guid>("PurchasedPhoneNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int?>("Xxxx")
                        .HasColumnType("integer")
                        .HasColumnName("XXXX");

                    b.ToTable("PurchasedPhoneNumbers");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.SalesLead", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("BusinessName")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("DateSubmitted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("character varying");

                    b.Property<string>("FirstName")
                        .HasColumnType("character varying");

                    b.Property<string>("LastName")
                        .HasColumnType("character varying");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("RoleTitle")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("SalesLeads");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.SentEmail", b =>
                {
                    b.Property<string>("CalendarInvite")
                        .HasColumnType("character varying");

                    b.Property<string>("CarbonCopy")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DateSent")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("DoNotSend")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("MessageBody")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("PrimaryEmailAddress")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("SalesEmailAddress")
                        .HasColumnType("character varying");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.ToTable("SentEmails");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.Service", b =>
                {
                    b.Property<Guid>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<string>("Price")
                        .HasColumnType("character varying");

                    b.HasKey("ServiceId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.SpeedDialKey", b =>
                {
                    b.Property<Guid>("SpeedDialKeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LabelOrName")
                        .HasColumnType("character varying");

                    b.Property<Guid>("NewClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("NumberOrExtension")
                        .HasColumnType("character varying");

                    b.HasKey("SpeedDialKeyId");

                    b.ToTable("SpeedDialKeys");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.VerifiedPhoneNumber", b =>
                {
                    b.Property<Guid>("VerifiedPhoneNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Activation")
                        .HasColumnType("character varying");

                    b.Property<string>("City")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("DateIngested")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateToExpire")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IngestedFrom")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("Jurisdiction")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("LastPorted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Lidbname")
                        .HasColumnType("character varying")
                        .HasColumnName("LIDBName");

                    b.Property<string>("Local")
                        .HasColumnType("character varying");

                    b.Property<string>("LocalAccessTransportArea")
                        .HasColumnType("character varying");

                    b.Property<string>("LocalExchangeCarrier")
                        .HasColumnType("character varying");

                    b.Property<string>("LocalExchangeCarrierType")
                        .HasColumnType("character varying");

                    b.Property<string>("LocalRoutingNumber")
                        .HasColumnType("character varying");

                    b.Property<int>("Npa")
                        .HasColumnType("integer")
                        .HasColumnName("NPA");

                    b.Property<string>("NumberType")
                        .HasColumnType("character varying");

                    b.Property<int>("Nxx")
                        .HasColumnType("integer")
                        .HasColumnName("NXX");

                    b.Property<string>("OperatingCompanyNumber")
                        .HasColumnType("character varying");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Province")
                        .HasColumnType("character varying");

                    b.Property<string>("RateCenter")
                        .HasColumnType("character varying");

                    b.Property<string>("ServiceProfileIdentifier")
                        .HasColumnType("character varying");

                    b.Property<string>("VerifiedDialedNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("Wireless")
                        .HasColumnType("boolean");

                    b.Property<int>("Xxxx")
                        .HasColumnType("integer")
                        .HasColumnName("XXXX");

                    b.HasKey("VerifiedPhoneNumberId");

                    b.ToTable("VerifiedPhoneNumbers");
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.AspNetRoleClaim", b =>
                {
                    b.HasOne("AccelerateNetworks.Operations.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.AspNetUserClaim", b =>
                {
                    b.HasOne("AccelerateNetworks.Operations.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.AspNetUserLogin", b =>
                {
                    b.HasOne("AccelerateNetworks.Operations.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.AspNetUserToken", b =>
                {
                    b.HasOne("AccelerateNetworks.Operations.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("AccelerateNetworks.Operations.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccelerateNetworks.Operations.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("AccelerateNetworks.Operations.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}

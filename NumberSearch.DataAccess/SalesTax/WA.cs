using Flurl.Http;

using System.Threading.Tasks;
using System.Xml.Serialization;

namespace NumberSearch.DataAccess
{
    // These XML serialization classes were autogenerated by the Edit => Paste Special => Paste XML as Classes command in VS 2019. 
    // Then I cleaned them up to remove the complex getter and setters and the duplicate private fields they required.
    // NOTE: Generated code may require at least .NET Framework 4.5 or .NET Core/Standard 2.0.
    [System.Serializable()]
    [System.ComponentModel.DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
    [XmlRoot(Namespace = "", ElementName = "response", IsNullable = false)]
    public class SalesTax
    {
        public Addressline addressline { get; set; }
        public TaxRate rate { get; set; }
        [XmlAttribute()]
        public int loccode { get; set; }
        [XmlAttribute()]
        public decimal localrate { get; set; }
        [XmlAttribute("rate")]
        public decimal rate1 { get; set; }
        [XmlAttribute()]
        public int code { get; set; }

        [System.Serializable()]
        [System.ComponentModel.DesignerCategory("code")]
        [XmlType(AnonymousType = true)]
        public partial class Addressline
        {
            [XmlAttribute()]
            public int code { get; set; }
            [XmlAttribute()]
            public string street { get; set; }
            [XmlAttribute()]
            public int househigh { get; set; }
            [XmlAttribute()]
            public int houselow { get; set; }
            [XmlAttribute()]
            public string evenodd { get; set; }
            [XmlAttribute()]
            public string state { get; set; }
            [XmlAttribute()]
            public int zip { get; set; }
            [XmlAttribute()]
            public int plus4 { get; set; }
            [XmlAttribute()]
            public string period { get; set; }
            [XmlAttribute()]
            public string rta { get; set; }
            [XmlAttribute()]
            public string ptba { get; set; }
            [XmlAttribute()]
            public string cez { get; set; }
        }

        [System.Serializable()]
        [System.ComponentModel.DesignerCategory("code")]
        [XmlType(AnonymousType = true)]
        public partial class TaxRate
        {
            [XmlAttribute()]
            public string name { get; set; }
            [XmlAttribute()]
            public int code { get; set; }
            [XmlAttribute()]
            public decimal staterate { get; set; }
            [XmlAttribute()]
            public decimal localrate { get; set; }
        }

        /// <summary>
        /// Get the total Sale Tax rate for a specific address.
        /// </summary>
        /// <param name="streetAddress"> A valid street address (ex. 6500 Linderson way) </param>
        /// <param name="city"> A valid City name (ex. Seattle) </param>
        /// <param name="zip"> A valid Zip code inside Washington State (ex. 98501) </param>
        /// <returns></returns>
        public static async Task<decimal> GetTaxRateAsync(string streetAddress, string city, string zip)
        {
            string baseUrl = "https://webgis.dor.wa.gov/webapi/";
            string endpoint = "AddressRates.aspx";
            string outputParameter = $"?output=xml";
            string addrParameter = $"&addr={streetAddress}";
            string cityParameter = $"&city={city}";
            string zipParameter = $"&zip={zip}";
            string url = $"{baseUrl}{endpoint}{outputParameter}{addrParameter}{cityParameter}{zipParameter}";

            var result = await url.GetStreamAsync().ConfigureAwait(false);

            var serializer = new XmlSerializer(typeof(SalesTax));
            var apiResponse = (SalesTax)serializer.Deserialize(result);

            return apiResponse.rate1;
        }

        public static async Task<SalesTax> GetAsync(string streetAddress, string city, string zip)
        {
            string baseUrl = "https://webgis.dor.wa.gov/webapi/";
            string endpoint = "AddressRates.aspx";
            string outputParameter = $"?output=xml";
            string addrParameter = $"&addr={streetAddress}";
            string cityParameter = $"&city={city}";
            string zipParameter = $"&zip={zip}";
            string url = $"{baseUrl}{endpoint}{outputParameter}{addrParameter}{cityParameter}{zipParameter}";

            var result = await url.GetStreamAsync().ConfigureAwait(false);

            // Learn more about this XML serialization method: https://docs.microsoft.com/en-us/dotnet/standard/serialization/how-to-deserialize-an-object
            var serializer = new XmlSerializer(typeof(SalesTax));
            var apiResponse = (SalesTax)serializer.Deserialize(result);

            return apiResponse;
        }
    }
}
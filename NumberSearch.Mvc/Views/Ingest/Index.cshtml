@using System.Text.Json;
@using System.Text.Json.Serialization;
@model NumberSearch.Mvc.IngestResults;

@{
    ViewData["Title"] = "Ingests";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script type="text/javascript">
    @{
        var graphData = Model?.Ingests.Where(x => x.StartDate > DateTime.Now.AddHours(-12)).OrderBy(x => x.StartDate).ToArray();
        var commaString = string.Empty;
        foreach (var ingest in graphData)
        {
            commaString += $"{ingest.NumbersRetrived}, ";
        }
        @Html.Raw($"var numbersRetrivedArr = [{commaString}];");
      }

    @{
        commaString = string.Empty;
        foreach (var ingest in graphData)
        {
            commaString += $"{ingest.IngestedNew}, ";
        }
        @Html.Raw($"var ingestedNewArr = [{commaString}];");
    }

    @{
        commaString = string.Empty;
        foreach (var ingest in graphData)
        {
            commaString += $"{ingest.FailedToIngest}, ";
        }
        @Html.Raw($"var failedToIngestArr = [{commaString}];");
    }

    @{
        commaString = string.Empty;
        foreach (var ingest in graphData)
        {
            commaString += $"{ingest.UpdatedExisting}, ";
        }
        @Html.Raw($"var updatedExisting = [{commaString}];");
    }

    @{
        commaString = string.Empty;
        foreach (var ingest in graphData)
        {
            commaString += $"{ingest.Unchanged}, ";
        }
        @Html.Raw($"var unchangedArr = [{commaString}];");
    }

    @{
        commaString = string.Empty;
        foreach (var ingest in graphData)
        {
            commaString += $"{ingest.Removed}, ";
        }
        @Html.Raw($"var removedArr = [{commaString}];");
    }

        @{
        commaString = string.Empty;
        foreach (var ingest in graphData)
        {
            commaString += $"\"{ingest.StartDate.ToString("h:mm tt")}\", ";
        }
        @Html.Raw($"var dateArr = [{commaString}];");
    }

    const numIngests = Array.from({
        length: numbersRetrivedArr
    }, (_, index) => index + 1);

    const numbersRetrivedObj = {
        name: "NumbersRetrived",
        values: numbersRetrivedArr
    };
    const ingestedNewObj = {
        name: "IngestedNew",
        values: ingestedNewArr
    };
    const failedToIngestObj = {
        name: "FailedToIngest",
        values: failedToIngestArr
    };
    const updatedExistingObj = {
        name: "UpdatedExisting",
        values: updatedExisting
    };
    const unchangedObj = {
        name: "Unchanged",
        values: unchangedArr
    };
    const removedObj = {
        name: "Removed",
        values: removedArr
    };
    const seriesArr = [numbersRetrivedObj, ingestedNewObj, failedToIngestObj, updatedExistingObj, unchangedObj,
        removedObj
    ];
    const arrArr = [numbersRetrivedArr]
    const numIngestsArr = Array.from({
        length: numbersRetrivedArr
    }, (_, index) => index + 1);
    //create new data object to store map off of

    const youData = {
        y: "# of Items",
        series: seriesArr,
        numIngests: numIngestsArr
    }


</script>

<style type="text/css">
    /* 13. Basic Styling with CSS */

    /* Style the lines by removing the fill and applying a stroke */
    .line {
        fill: none;
        stroke: #ffab00;
        stroke-width: 3;
    }

    .overlay {
        fill: none;
        pointer-events: all;
    }

    /* Style the dots by assigning a fill and stroke */
    .dot {
        fill: #ffab00;
        stroke: #fff;
    }

    .focus circle {
        fill: none;
        stroke: steelblue;
    }
</style>

<header class="navbar navbar-expand-lg navbar-light bg-light navbar-sticky navbar-shadow" data-scroll-header data-fixed-element>
  <div class="container px-0 px-xl-3">
    <button class="navbar-toggler ms-n2 me-2" type="button" data-bs-toggle="offcanvas" data-bs-target="#primaryMenu"><span class="navbar-toggler-icon"></span></button><a class="navbar-brand flex-shrink-0 order-lg-1 ms-lg-0 pe-lg-2 me-lg-4" href="/"><img class="d-none d-lg-block" src="/images/scaled/accelerate.png" alt="Accelerate Networks" width="153"><img class="d-lg-none" src="img/original/favicon-194x194.png" alt="Accelerate Networks" width="58"></a>
    <div class="d-flex align-items-center order-lg-3 ms-lg-auto"><a class="nav-link-style fs-sm text-nowrap d-none d-lg-inline-block" href="tel:12068588757">Talk to an expert: <strong>(206) 858-8757</strong></a><a class="d-md-none text-reset" href="tel:12068588757"><i class="ai-phone fs-xl me-2 align-middle"></i></a><a class="btn btn-brand-secondary ms-grid-gutter d-none d-lg-inline-block" href="/pricing">Get started</a></div>
    <div class="offcanvas offcanvas-collapse order-lg-2" id="primaryMenu">
      <div class="offcanvas-header navbar-shadow">
        <h5 class="mt-1 mb-0">Menu</h5>
        <button class="btn-close lead" type="button" data-bs-dismiss="offcanvas" aria-label="Close"></button>
      </div>
      <div class="offcanvas-body">
        <!-- Menu-->
        <ul class="navbar-nav">
          <li class="nav-item"><a class="nav-link" href="/features">Features</a></li>
          <li class="nav-item"><a class="nav-link" href="/pricing">Pricing</a></li>
          <li class="nav-item dropdown"><a class="nav-link" href="#" data-bs-toggle="dropdown">Resources</a>
            <div class="dropdown-menu" style="min-width:400px">
              <div class="row">
                <div class="col-sm-6"><a class="dropdown-item" href="/support">Knowledge base</a><a class="dropdown-item" href="/lookup">Port your number</a></div>
                <div class="col-sm-6"><a class="dropdown-item" href="https://blog.acceleratenetworks.com">Blog</a><a class="dropdown-item" href="/about">About us</a></div>
              </div>
            </div>
          </li>
        </ul>
      </div>
      <div class="offcanvas-footer border-top">
        <button class="btn btn-brand-secondary btn-sm w-100" type="button">Get started</button>
      </div>
    </div>
  </div>
</header>

<div class="container">
    <br />
    <div class="jumbotron shadow">
        <h1 class="display-4 p-2">Ingests</h1>
    </div>

    <canvas id="myChart" width="400" height="200" class="pb-5"></canvas>

    @{
        if (Model != null && Model?.Ingests.Count() > 0)
        {
            @*var total = $"{Model.Ingests.Count()} ingests have been performed!";
                <div class="alert alert-success" role="alert">
                    @total
                </div>*@
            var timeAgo = DateTime.Now - Model?.Ingests.FirstOrDefault()?.StartDate;
            var last = $"Last ingest performed {timeAgo.GetValueOrDefault().Minutes} Minutes ago.";
            var oneHour = DateTime.Now - DateTime.Now.AddHours(-1);
            if (timeAgo > oneHour)
            {
                <div class="alert alert-danger" role="alert">
                    @last
                </div>
            }
            else
            {
                <div class="alert alert-success" role="alert">
                    @last
                </div>
            }

            var statusSymbol = "✔️";
            foreach (var code in Model?.PriorityAreaCodes)
            {
                if (code.Item2 < 10)
                {
                    statusSymbol = "⚠️";
                }
                else if (code.Item2 < 1000)
                {
                    statusSymbol = "❌";
                }
            }

            <h1 class="display-4 p-2">
                Provider Health @statusSymbol
            </h1>
            <h4>@Model?.TotalPhoneNumbers Phone Numbers Total</h4>
            <div class="table-responsive shadow-sm mt-3">
                <table class="table table-hover table-striped table-borderless">
                    <thead>
                        <tr>
                            <th>
                                Number Type
                            </th>
                            <th>
                                Count
                            </th>
                            <th>
                                % of Total
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                All Numbers
                            </td>
                            <td>
                                @Model?.TotalPhoneNumbers
                            </td>
                            <td>
                                100.00 %
                            </td>
                        </tr>
                        <tr>
                            <td>
                                Executive
                            </td>
                            <td>
                                @Model?.TotalExecutiveNumbers
                            </td>
                            <td>
                                @{
                                    var executivePortion = Model?.TotalExecutiveNumbers * 100M / Model?.TotalPhoneNumbers;
                                }
                                @executivePortion.Value.ToString("F") %
                            </td>
                        </tr>
                        <tr>
                            <td>
                                Premium
                            </td>
                            <td>
                                @Model?.TotalPremiumNumbers
                            </td>
                            <td>
                                @{
                                    var premiumPortion = Model?.TotalPremiumNumbers * 100M / Model?.TotalPhoneNumbers;
                                }
                                @premiumPortion.Value.ToString("F") %
                            </td>
                        </tr>
                        <tr>
                            <td>
                                Standard
                            </td>
                            <td>
                                @Model?.TotalStandardNumbers
                            </td>
                            <td>
                                @{
                                    var standardPortion = Model?.TotalStandardNumbers * 100M / Model?.TotalPhoneNumbers;
                                }
                                @standardPortion.Value.ToString("F") %
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="table-responsive shadow-sm mt-3">
                <table class="table table-hover table-striped table-borderless">
                    <thead>
                        <tr>
                            <th>Prority Area Codes</th>
                            @{
                                foreach (var code in Model?.PriorityAreaCodes)
                                {
                                    <th>
                                        (@code.Item1)
                                    </th>
                                }
                            }
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Count</td>
                            @{
                                foreach (var code in Model?.PriorityAreaCodes)
                                {
                                    <td>
                                        @code.Item2
                                    </td>
                                }
                            }
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="table-responsive shadow-sm mt-3">
                <table class="table table-hover table-striped table-borderless">
                    <thead>
                        <tr>
                            <th>
                                Provider
                            </th>
                            <th>
                                Current Count
                            </th>
                            <th>
                                Ingest rate
                            </th>
                            <th>
                                Run Time (1 Day Average)
                            </th>
                            <th>
                                Longest Run (Last 7 Days)
                            </th>
                            <th>
                                Churn (Average per Ingest)
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            var oneDayAgo = DateTime.Now.AddDays(-1);
                            var providers = Model?.Ingests.Select(x => x.IngestedFrom).Distinct();

                            foreach (var provider in providers)
                            {
                                var ingests = Model?.Ingests.Where(x => x.IngestedFrom == provider && x.EndDate >= oneDayAgo);
                                var ingestsSeven = Model?.Ingests.Where(x => x.IngestedFrom == provider && x.EndDate >= DateTime.Now.AddDays(-7));
                                var currentCount = Model?.CurrentState.Where(x => x.Item1 == provider);
                                <tr>
                                    <td>
                                        @provider
                                    </td>
                                    <td>
                                        @{
                                            var portion = currentCount.FirstOrDefault().Item2 * 100M / Model?.TotalPhoneNumbers;
                                        }
                                        @currentCount.FirstOrDefault().Item2
                                        (@portion.Value.ToString("F") %)
                                    </td>
                                    <td>
                                        @{
                                            var output = $"{ingests.Count()} per day";
                                        }
                                        @output
                                    </td>
                                    <td>
                                        @{
                                            var runTimes = new List<TimeSpan>();
                                            foreach (var ingest in ingests)
                                            {
                                                runTimes.Add(ingest.EndDate - ingest.StartDate);
                                            }
                                            var formattedRunTime = string.Empty;
                                            // https://stackoverflow.com/questions/8847679/find-average-of-collection-of-timespans
                                            if (runTimes.Count > 0)
                                            {
                                                var doubleTicks = runTimes?.Average(x => x.Ticks);
                                                var longTicks = Convert.ToInt64(doubleTicks);
                                                var averageRunTime = new TimeSpan(longTicks);
                                                formattedRunTime = $"{averageRunTime.Hours} Hours and {averageRunTime.Minutes} Minutes";
                                            }
                                        }
                                        @formattedRunTime
                                    </td>
                                    <td>
                                        @{
                                            var runTimesSeven = new List<TimeSpan>();
                                            foreach (var ingest in ingestsSeven)
                                            {
                                                runTimesSeven.Add(ingest.EndDate - ingest.StartDate);
                                            }
                                            var formattedLongest = string.Empty;
                                            if (runTimesSeven.Count() > 0)
                                            {
                                                var longest = runTimesSeven.Max();
                                                formattedLongest = $"{longest.Hours} Hours and {longest.Minutes} Minutes";
                                            }
                                        }
                                        @formattedLongest
                                    </td>
                                    <td>
                                        @{
                                            var churn = ingests.Count() > 0 ? ingests?.Average(x => x.Removed) : 0;
                                            var formattedChurn = $"{churn.Value.ToString("F")} Numbers Removed";
                                        }
                                        @formattedChurn
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
            <h1 class="display-4 p-3">
                Logged Ingests
            </h1>
            <div class="table-responsive shadow-sm mb-4">
                <table class="table table-hover table-striped table-borderless">
                    <thead>
                        <tr>
                            <th scope="col">Ingested From</th>
                            <th scope="col">Numbers Retrived</th>
                            <th scope="col">Ingested New</th>
                            <th scope="col">Failed to Ingest</th>
                            <th scope="col">Updated Existing</th>
                            <th scope="col">Unchanged</th>
                            <th scope="col">Removed</th>
                            <th scope="col">Minutes Elapsed</th>
                            <th scope="col">Start Date</th>
                            <th scope="col">End Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            foreach (var ingest in Model.Ingests.Take(31))
                            {
                                var timeElapsed = ingest.StartDate - ingest.EndDate;
                                <tr>
                                    @{
                                        if (ingest?.IngestedFrom == "All")
                                        {
                                            <td class="table-success">@ingest?.IngestedFrom</td>
                                            <td class="table-success">@ingest.NumbersRetrived</td>
                                            <td class="table-success">@ingest.IngestedNew</td>
                                            <td class="table-success">@ingest.FailedToIngest</td>
                                            <td class="table-success">@ingest.UpdatedExisting</td>
                                            <td class="table-success">@ingest.Unchanged</td>
                                            <td class="table-success">@ingest.Removed</td>
                                            <td class="table-success"><strong>@timeElapsed.ToString(@"hh\:mm")</strong></td>
                                            <td class="table-success">@ingest?.StartDate</td>
                                            <td class="table-success">@ingest?.EndDate</td>
                                        }
                                        else
                                        {
                                            <td>@ingest?.IngestedFrom</td>
                                            <td>@ingest.NumbersRetrived</td>
                                            <td>@ingest.IngestedNew</td>
                                            <td>@ingest.FailedToIngest</td>
                                            <td>@ingest.UpdatedExisting</td>
                                            <td>@ingest.Unchanged</td>
                                            <td>@ingest.Removed</td>
                                            <td>@timeElapsed.ToString(@"hh\:mm")</td>
                                            <td>@ingest?.StartDate</td>
                                            <td>@ingest?.EndDate</td>
                                        }
                                    }
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        }
    }
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js"></script>
<script>
    var ctx = document.getElementById('myChart');
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: dateArr,
            datasets: [{
                label: 'Count of Phone Numbers Ingested',
                data: numbersRetrivedArr,
                backgroundColor: [
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(255, 159, 64, 0.2)'
                ],
                borderColor: [
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: false
                    }
                }]
            }
        }
    });
</script>

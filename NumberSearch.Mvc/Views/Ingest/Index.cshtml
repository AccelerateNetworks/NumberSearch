@using System.Text.Json;
@using System.Text.Json.Serialization;
@model NumberSearch.DataAccess.IngestStatistics[]

@{
    ViewData["Title"] = "Ingests";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script type="text/javascript">



    @{
        var graphData = Model?.Take(31).ToArray();
        var commaString = string.Empty;
        foreach (var ingest in graphData)
        {
            commaString += $"{ingest.NumbersRetrived}, ";
        }
        @Html.Raw($"var numbersRetrivedArr = [{commaString}];");
      }

    @{
        commaString = string.Empty;
        foreach (var ingest in graphData)
        {
            commaString += $"{ingest.IngestedNew}, ";
        }
        @Html.Raw($"var ingestedNewArr = [{commaString}];");
    }

    @{
        commaString = string.Empty;
        foreach (var ingest in graphData)
        {
            commaString += $"{ingest.FailedToIngest}, ";
        }
        @Html.Raw($"var failedToIngestArr = [{commaString}];");
    }

    @{
        commaString = string.Empty;
        foreach (var ingest in graphData)
        {
            commaString += $"{ingest.UpdatedExisting}, ";
        }
        @Html.Raw($"var updatedExisting = [{commaString}];");
    }

    @{
        commaString = string.Empty;
        foreach (var ingest in graphData)
        {
            commaString += $"{ingest.Unchanged}, ";
        }
        @Html.Raw($"var unchangedArr = [{commaString}];");
    }

    @{
        commaString = string.Empty;
        foreach (var ingest in graphData)
        {
            commaString += $"{ingest.Removed}, ";
        }
        @Html.Raw($"var removedArr = [{commaString}];");
    }

        @{
        commaString = string.Empty;
        foreach (var ingest in graphData)
        {
            commaString += $"\"{ingest.StartDate.ToShortDateString()}\", ";
        }
        @Html.Raw($"var dateArr = [{commaString}];");
    }

    const numIngests = Array.from({
        length: numbersRetrivedArr
    }, (_, index) => index + 1);

    const numbersRetrivedObj = {
        name: "NumbersRetrived",
        values: numbersRetrivedArr
    };
    const ingestedNewObj = {
        name: "IngestedNew",
        values: ingestedNewArr
    };
    const failedToIngestObj = {
        name: "FailedToIngest",
        values: failedToIngestArr
    };
    const updatedExistingObj = {
        name: "UpdatedExisting",
        values: updatedExisting
    };
    const unchangedObj = {
        name: "Unchanged",
        values: unchangedArr
    };
    const removedObj = {
        name: "Removed",
        values: removedArr
    };
    const seriesArr = [numbersRetrivedObj, ingestedNewObj, failedToIngestObj, updatedExistingObj, unchangedObj,
        removedObj
    ];
    const arrArr = [numbersRetrivedArr]
    const numIngestsArr = Array.from({
        length: numbersRetrivedArr
    }, (_, index) => index + 1);
    //create new data object to store map off of

    const youData = {
        y: "# of Items",
        series: seriesArr,
        numIngests: numIngestsArr
    }


</script>

<style type="text/css">
    /* 13. Basic Styling with CSS */

    /* Style the lines by removing the fill and applying a stroke */
    .line {
        fill: none;
        stroke: #ffab00;
        stroke-width: 3;
    }

    .overlay {
        fill: none;
        pointer-events: all;
    }

    /* Style the dots by assigning a fill and stroke */
    .dot {
        fill: #ffab00;
        stroke: #fff;
    }

    .focus circle {
        fill: none;
        stroke: steelblue;
    }
</style>

<div class="container">
    <br />
    <div class="jumbotron">
        <h1 class="display-4">Ingests</h1>
    </div>

    <canvas id="myChart" width="400" height="200" class="pb-5"></canvas>

    @{
        if (Model != null && Model?.Length > 0)
        {
            var total = $"{Model.Length} ingests have been performed!";
            <div class="alert alert-success" role="alert">
                @total
            </div>
            var last = $"Last ingest performed at {Model?.FirstOrDefault()?.StartDate}";
            <div class="alert alert-info" role="alert">
                @last
            </div>
            <h1 class="display-4">
                Provider Health
            </h1>
            <div class="table-responsive">
                <table class="table table-hover table-striped table-borderless">
                    <thead>
                        <tr>
                            <th>
                                Provider
                            </th>
                            <th>
                                Ingest rate
                            </th>
                            <th>
                                Run Time (1 Day Average)
                            </th>
                            <th>
                                Longest Run (Last 7 Days)
                            </th>
                            <th>
                                Churn (1 Day Average)
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            var oneDayAgo = DateTime.Now.AddDays(-1);
                            var providers = Model?.Select(x => x.IngestedFrom).Distinct();

                            foreach (var provider in providers)
                            {
                                var ingests = Model?.Where(x => x.IngestedFrom == provider && x.EndDate >= oneDayAgo);
                                var ingestsSeven = Model?.Where(x => x.IngestedFrom == provider && x.EndDate >= DateTime.Now.AddDays(-7));
                                <tr>
                                    <td>
                                        @provider
                                    </td>
                                    <td>
                                        @{
                                            var output = $"{ingests.Count()} per day";
                                        }
                                        @output
                                    </td>
                                    <td>
                                        @{
                                            var runTimes = new List<TimeSpan>();
                                            foreach (var ingest in ingests)
                                            {
                                                runTimes.Add(ingest.EndDate - ingest.StartDate);
                                            }
                                            var formattedRunTime = string.Empty;
                                            // https://stackoverflow.com/questions/8847679/find-average-of-collection-of-timespans
                                            if (runTimes.Count > 0)
                                            {
                                                var doubleTicks = runTimes?.Average(x => x.Ticks);
                                                var longTicks = Convert.ToInt64(doubleTicks);
                                                var averageRunTime = new TimeSpan(longTicks);
                                                formattedRunTime = $"{averageRunTime.Hours} Hours and {averageRunTime.Minutes} Minutes";
                                            }
                                        }
                                        @formattedRunTime
                                    </td>
                                    <td>
                                        @{
                                            var runTimesSeven = new List<TimeSpan>();
                                            foreach (var ingest in ingestsSeven)
                                            {
                                                runTimesSeven.Add(ingest.EndDate - ingest.StartDate);
                                            }
                                            var formattedLongest = string.Empty;
                                            if (runTimesSeven.Count() > 0)
                                            {
                                                var longest = runTimesSeven.Max();
                                                formattedLongest = $"{longest.Hours} Hours and {longest.Minutes} Minutes";
                                            }
                                        }
                                        @formattedLongest
                                    </td>
                                    <td>
                                        @{
                                            var churn = ingests.Count() > 0 ? ingests?.Average(x => x.Removed) : 0;
                                            var formattedChurn = $"{churn} Numbers Removed";
                                        }
                                        @formattedChurn
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
            <h1 class="display-4">
                Logged Ingests
            </h1>
            <div class="table-responsive">
                <table class="table table-hover table-striped table-borderless">
                    <thead>
                        <tr>
                            <th scope="col">Ingested From</th>
                            <th scope="col">Numbers Retrived</th>
                            <th scope="col">Ingested New</th>
                            <th scope="col">Failed to Ingest</th>
                            <th scope="col">Updated Existing</th>
                            <th scope="col">Unchanged</th>
                            <th scope="col">Removed</th>
                            <th scope="col">Minutes Elapsed</th>
                            <th scope="col">Start Date</th>
                            <th scope="col">End Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            foreach (var ingest in Model.Take(31))
                            {
                                var timeElapsed = ingest.StartDate - ingest.EndDate;
                                <tr>
                                    @{
                                        if (ingest?.IngestedFrom == "All")
                                        {
                                            <td class="table-success">@ingest?.IngestedFrom</td>
                                            <td class="table-success">@ingest.NumbersRetrived</td>
                                            <td class="table-success">@ingest.IngestedNew</td>
                                            <td class="table-success">@ingest.FailedToIngest</td>
                                            <td class="table-success">@ingest.UpdatedExisting</td>
                                            <td class="table-success">@ingest.Unchanged</td>
                                            <td class="table-success">@ingest.Removed</td>
                                            <td class="table-success"><strong>@timeElapsed.ToString(@"hh\:mm")</strong></td>
                                            <td class="table-success">@ingest?.StartDate</td>
                                            <td class="table-success">@ingest?.EndDate</td>
                                        }
                                        else
                                        {
                                            <td>@ingest?.IngestedFrom</td>
                                            <td>@ingest.NumbersRetrived</td>
                                            <td>@ingest.IngestedNew</td>
                                            <td>@ingest.FailedToIngest</td>
                                            <td>@ingest.UpdatedExisting</td>
                                            <td>@ingest.Unchanged</td>
                                            <td>@ingest.Removed</td>
                                            <td>@timeElapsed.ToString(@"hh\:mm")</td>
                                            <td>@ingest?.StartDate</td>
                                            <td>@ingest?.EndDate</td>
                                        }
                                    }
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        }
    }
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js"></script>
<script>
    var ctx = document.getElementById('myChart');
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: dateArr,
            datasets: [{
                label: 'Count of Phone Numbers Ingested',
                data: numbersRetrivedArr,
                backgroundColor: [
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(255, 159, 64, 0.2)'
                ],
                borderColor: [
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: false
                    }
                }]
            }
        }
    });
</script>
@using System.Text.Json;
@using System.Text.Json.Serialization;
@model NumberSearch.DataAccess.IngestStatistics[]

@{
    ViewData["Title"] = "Ingests";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="https://d3js.org/d3.v5.min.js"></script>
<script type="text/javascript">
    var margin = {
        top: 20,
        right: 20,
        bottom: 30,
        left: 50
    },
        width = 960 - margin.left - margin.right,
        height = 500 - margin.top - margin.bottom;

    var state = 0;

    @{
        var commaString = string.Empty;
        foreach (var ingest in Model)
        {
            if (ingest.IngestedFrom == "All")
            {
                commaString += $"{ingest.NumbersRetrived}, ";
            }
        }
        @Html.Raw($"var numbersRetrivedArr = [{commaString}];");
      }

    @{
        commaString = string.Empty;
        foreach (var ingest in Model)
        {
            if (ingest.IngestedFrom == "All")
            {
                commaString += $"{ingest.IngestedNew}, ";
            }
        }
        @Html.Raw($"var ingestedNewArr = [{commaString}];");
    }

    @{
        commaString = string.Empty;
        foreach (var ingest in Model)
        {
            if (ingest.IngestedFrom == "All")
            {
                commaString += $"{ingest.FailedToIngest}, ";
            }
        }
        @Html.Raw($"var failedToIngestArr = [{commaString}];");
    }

    @{
        commaString = string.Empty;
        foreach (var ingest in Model)
        {
            if (ingest.IngestedFrom == "All")
            {
                commaString += $"{ingest.UpdatedExisting}, ";
            }
        }
        @Html.Raw($"var updatedExisting = [{commaString}];");
    }

    @{
        commaString = string.Empty;
        foreach (var ingest in Model)
        {
            if (ingest.IngestedFrom == "All")
            {
                commaString += $"{ingest.Unchanged}, ";
            }
        }
        @Html.Raw($"var unchangedArr = [{commaString}];");
    }

    @{
        commaString = string.Empty;
        foreach (var ingest in Model)
        {
            if (ingest.IngestedFrom == "All")
            {
                commaString += $"{ingest.Removed}, ";
            }
        }
        @Html.Raw($"var removedArr = [{commaString}];");
    }

    const numIngests = Array.from({
        length: numbersRetrivedArr
    }, (_, index) => index + 1);

    const numbersRetrivedObj = {
        name: "NumbersRetrived",
        values: numbersRetrivedArr
    };
    const ingestedNewObj = {
        name: "IngestedNew",
        values: ingestedNewArr
    };
    const failedToIngestObj = {
        name: "FailedToIngest",
        values: failedToIngestArr
    };
    const updatedExistingObj = {
        name: "UpdatedExisting",
        values: updatedExisting
    };
    const unchangedObj = {
        name: "Unchanged",
        values: unchangedArr
    };
    const removedObj = {
        name: "Removed",
        values: removedArr
    };
    const seriesArr = [numbersRetrivedObj, ingestedNewObj, failedToIngestObj, updatedExistingObj, unchangedObj,
        removedObj
    ];
    const arrArr = [numbersRetrivedArr]
    const numIngestsArr = Array.from({
        length: numbersRetrivedArr
    }, (_, index) => index + 1);
    //create new data object to store map off of

    const youData = {
        y: "# of Items",
        series: seriesArr,
        numIngests: numIngestsArr
    }

    const data = []

    function drawChart(chartNum) {
        // set the dimensions and margins of the graph
        var margin = {
            top: 10,
            right: 30,
            bottom: 30,
            left: 60
        },
            width = 460 - margin.left - margin.right,
            height = 400 - margin.top - margin.bottom;

        // append the svg object to the body of the page
        var svg = d3.select("#my_dataviz")
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform",
                "translate(" + margin.left + "," + margin.top + ")");

        //Read the data
        //Use the margin convention practice 
        var margin = {
            top: 50,
            right: 50,
            bottom: 50,
            left: 50
        },
            width = window.innerWidth - margin.left - margin.right // Use the window's width 
            ,
            height = window.innerHeight - margin.top - margin.bottom; // Use the window's height

        // The number of datapoints
        var n = 21;

        // 5. X scale will use the index of our data
        var xScale = d3.scaleLinear()
            .domain([0, d3.values(youData)[1][chartNum].values.length]) // input
            .range([0, width]); // output
        var yMax = d3.max(d3.values(youData)[1][chartNum].values);
        //----> 6. Y scale will use the randomly generate number  <-------
        var yScale = d3.scaleLinear()
            .domain([0, yMax]) // input
            .range([height, 0]); // output 

        // 7. d3's line generator
        var line = d3.line()
            .x(function (d, i) {
                return xScale(i);
            }) // set the x values for the line generator
            .y(function (d) {
                return yScale(d.y);
            }) // set the y values for the line generator 
            .curve(d3.curveMonotoneX) // apply smoothing to the line
        console.log(chartNum)
        console.log(d3.values(youData)[1][chartNum])
        // 8. An array of objects of length N. Each object has key -> value pair, the key being "y" and the value is a random number
        var dataset = d3.range(numbersRetrivedArr.length).map(function (d) {
            return {
                "y": d3.values(youData)[1][chartNum].values[d]
            }
        })

        // 1. Add the SVG to the page and employ #2
        var svg = d3.select("#wolololol").append("svg")
            .attr("id", "thisischart")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        // 3. Call the x axis in a group tag
        svg.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(xScale)); // Create an axis component with d3.axisBottom

        // 4. Call the y axis in a group tag
        svg.append("g")
            .attr("class", "y axis")
            .call(d3.axisLeft(yScale)); // Create an axis component with d3.axisLeft

        // 9. Append the path, bind the data, and call the line generator 
        svg.append("path")
            .datum(dataset) // 10. Binds data to the line 
            .attr("class", "line") // Assign a class for styling 
            .attr("d", line); // 11. Calls the line generator 

        // 12. Appends a circle for each datapoint 
        svg.selectAll(".dot")
            .data(dataset)
            .enter().append("circle") // Uses the enter().append() method
            .attr("class", "dot") // Assign a class for styling
            .attr("cx", function (d, i) {
                return xScale(i)
            })
            .attr("cy", function (d) {
                return yScale(d.y)
            })
            .attr("r", 5)
            .on("mouseover", function (a, b, c) {
                console.log(a)
                this.attr('class', 'focus')
            })
            .on("mouseout", function () { })
    }

    function nextChart() {
        console.log(d3.values(youData)[1].length - 1);

        if (state = 0) {
            drawChart(state);
            break;
        }

        if (state < d3.values(youData)[1].length - 1) {
            state++;
        } else {
            state = 0;
        }
        var el = document.getElementById('thisischart');
        console.log(el);
        el.remove();
        drawChart(state);
    }
</script>

<style type="text/css">
    /* 13. Basic Styling with CSS */

    /* Style the lines by removing the fill and applying a stroke */
    .line {
        fill: none;
        stroke: #ffab00;
        stroke-width: 3;
    }

    .overlay {
        fill: none;
        pointer-events: all;
    }

    /* Style the dots by assigning a fill and stroke */
    .dot {
        fill: #ffab00;
        stroke: #fff;
    }

    .focus circle {
        fill: none;
        stroke: steelblue;
    }
</style>

<div class="container">
    <br />
    <div class="jumbotron">
        <h1 class="display-4">Ingests</h1>
    </div>

    <div id="wolololol">

    </div>

    <button onclick="nextChart()">Next Chart</button>

    @{
        if (Model != null && Model?.Length > 0)
        {
            var total = $"{Model.Length} ingests have been performed!";
            <div class="alert alert-success" role="alert">
                @total
            </div>
            var last = $"Last ingest performed at {Model?.FirstOrDefault()?.StartDate}";
            <div class="alert alert-info" role="alert">
                @last
            </div>
            <div class="table-responsive table-hover table-striped table-borderless">
                <table class="table ">
                    <thead>
                        <tr>
                            <th scope="col">Ingested From</th>
                            <th scope="col">Numbers Retrived</th>
                            <th scope="col">Ingested New</th>
                            <th scope="col">Failed to Ingest</th>
                            <th scope="col">Updated Existing</th>
                            <th scope="col">Unchanged</th>
                            <th scope="col">Removed</th>
                            <th scope="col">Minutes Elapsed</th>
                            <th scope="col">Start Date</th>
                            <th scope="col">End Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            foreach (var ingest in Model)
                            {
                                var timeElapsed = ingest.StartDate - ingest.EndDate;
                                <tr>
                                    @{
                                        if (ingest?.IngestedFrom == "All")
                                        {
                                            <td class="table-success">@ingest?.IngestedFrom</td>
                                            <td class="table-success">@ingest.NumbersRetrived</td>
                                            <td class="table-success">@ingest.IngestedNew</td>
                                            <td class="table-success">@ingest.FailedToIngest</td>
                                            <td class="table-success">@ingest.UpdatedExisting</td>
                                            <td class="table-success">@ingest.Unchanged</td>
                                            <td class="table-success">@ingest.Removed</td>
                                            <td class="table-success"><strong>@timeElapsed.ToString(@"hh\:mm")</strong></td>
                                            <td class="table-success">@ingest?.StartDate</td>
                                            <td class="table-success">@ingest?.EndDate</td>
                                        }
                                        else
                                        {
                                            <td>@ingest?.IngestedFrom</td>
                                            <td>@ingest.NumbersRetrived</td>
                                            <td>@ingest.IngestedNew</td>
                                            <td>@ingest.FailedToIngest</td>
                                            <td>@ingest.UpdatedExisting</td>
                                            <td>@ingest.Unchanged</td>
                                            <td>@ingest.Removed</td>
                                            <td>@timeElapsed.ToString(@"hh\:mm")</td>
                                            <td>@ingest?.StartDate</td>
                                            <td>@ingest?.EndDate</td>
                                        }
                                    }
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        }
    }
</div>
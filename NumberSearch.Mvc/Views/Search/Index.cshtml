@model NumberSearch.Mvc.SearchResults;

@{
    ViewData["Title"] = "Home Page";

    var searchText = string.Empty;
    if (Model?.Query != null)
    {
        searchText = Model.Query;
    }

    var alreadyInCart = Model?.Cart?.PhoneNumbers.ToDictionary(x => x?.DialedNumber, x => x);
}


<div class="container">
    <br />
    <div class="pricing-header mx-auto mb-3 text-center">
        <h1 class="display-4">Number Search</h1>
    </div>
    <br />
    <div class="jumbotron mb-3">
        <h1 class="display-4">Numbers for all your needs!</h1>
        <p> Use * to pad your search, for example ***word to search for a number containing word, but exclude the area code. Conversely, 206******* will find 206 area code numbers.</p>
        <form class="form-row justify-content-center" action="/Search">
            <div class="form-group">
                <div class="input-group mx-auto input-group-lg">
                    <div class="input-group-prepend">
                        <span class="input-group-text">+1</span>
                    </div>
                    <input type="text" name="Query" class="form-control" placeholder="Enter a Phone Number" value="@searchText">
                    <button type="submit" class="btn btn-success pr-4 pl-4" onclick="displayBusyIndicator()">Search</button>
                    <button class="btn btn-info pr-3 pl-3" onclick="displayBusyIndicator()" asp-controller="Porting" asp-action="CheckPortability">Port</button>
                </div>
            </div>
        </form>
    </div>

    <partial name="_LoadingPartial" />

    @{
        if (Model != null && Model?.PhoneNumbers?.Length > 0)
        {
            var total = $"{Model.NumberOfResults} available numbers found!";
            <div class="alert alert-success" role="alert">
                @total
            </div>
            <div class="table-responsive">
                <table class="table table-striped table-borderless table-hover">
                    <tbody>
                        @{
                            var match = Model?.CleanQuery.Replace("*", string.Empty);
                            foreach (var item in Model?.PhoneNumbers)
                            {
                                var location = $"{item?.City ?? "Unknown City"}, {item?.State ?? "Unknown State"}";
                                var formattedNumber = $"({item.NPA}) {item.NXX}-{item.XXXX.ToString("0000")}";
                                var number = item.DialedNumber;
                                if (item.DialedNumber.Contains(match))
                                {
                                    var start = item.DialedNumber.IndexOf(match);
                                    var stop = match.Length;
                                    var beginning = item.DialedNumber.Substring(0, start);
                                    var middle = item.DialedNumber.Substring(start, stop);
                                    var end = item.DialedNumber.Substring(start + stop);
                                    number = $"{beginning}<b class='text-success'>{middle}</b>{end}";
                                }
                                <tr>
                                    <td scope="row"><h4>@formattedNumber</h4></td>
                                    <td>@Html.Raw(number)</td>
                                    <td>@location</td>
                                    <td>
                                        <a asp-controller="Cart" asp-action="BuyPhoneNumber" asp-route-id="@item.DialedNumber" asp-route-Query="@Model.Query" target="_top">
                                            <input type="button" class="btn btn-outline-primary" value="Add to Cart">
                                        </a>
                                        @{
                                            if (alreadyInCart.TryGetValue(item.DialedNumber, out var _))
                                            {
                                                <a asp-controller="Cart" asp-action="RemovePhoneNumber" asp-route-id="@item.DialedNumber" asp-route-Query="@Model.Query" target="_top">
                                                    <input type="button" class="btn btn-outline-danger" value="Remove">
                                                </a>
                                            }
                                        }
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
            <form action="/Search">
                <div class="btn-group" role="group" aria-label="pagination">
                    @{
                        var maxPage = Model.NumberOfResults / 100;
                        if ((Model.NumberOfResults % 100) > 1)
                        {
                            maxPage += 1;
                        }
                        if (Model.Page > 1)
                        {
                            var previousPage = Model.Page - 1;
                            <a class="btn btn-outline-secondary" onclick="displayBusyIndicator()" href="/Search?Query=@Model.Query&Page=@previousPage">Previous</a>
                            <a class="btn btn-outline-dark disabled">Page @Model.Page of @maxPage</a>
                        }
                        else
                        {
                            <a class="btn btn-outline-secondary disabled">Previous</a>
                            <a class="btn btn-outline-dark disabled">Page @Model.Page of @maxPage</a>
                        }
                        var pageResultsCount = Model.Page * 100;
                        if (Model.NumberOfResults > pageResultsCount)
                        {
                            var nextPage = Model.Page + 1;
                            <a class="btn btn-outline-secondary" onclick="displayBusyIndicator()" href="/Search?Query=@Model.Query&Page=@nextPage">Next</a>
                        }
                        else
                        {
                            <a class="btn btn-outline-secondary disabled">Next</a>
                        }
                    }
                </div>
            </form>
        }
        else if (Model != null && Model?.PhoneNumbers?.Length == 0)
        {
            <div class="alert alert-danger" role="alert">
                No available numbers found!
            </div>
        }
    }

</div>
<br />
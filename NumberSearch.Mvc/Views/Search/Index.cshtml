@model NumberSearch.Mvc.SearchResults;

@{
    ViewData["Title"] = "Home Page";

    var searchText = string.Empty;
    if (Model?.Query != null)
    {
        searchText = Model.Query;
    }

    var alreadyInCart = Model?.Cart?.PhoneNumbers.ToDictionary(x => x?.DialedNumber, x => x);
}

<div class="container">
    <br />
    <div class="pricing-header mx-auto mb-3 text-center">
        <h1 class="display-4">Number Search</h1>
    </div>
    <br />
    <div class="jumbotron mb-3">
        <h1 class="display-4 pb-3">Numbers for all your needs!</h1>
        <p>To search by area code, enter the area code and press search.</p>
        <p class="pb-3">For advanced search, use * to pad your search, for example ***word to search for a number containing word, but exclude the area code.</p>
        <form class="form-row justify-content-center" action="/Search">
            <div class="form-group">
                <div class="input-group mx-auto input-group-lg">
                    <div class="input-group-prepend">
                        <span class="input-group-text">+1</span>
                    </div>
                    <input type="text" name="Query" class="form-control" placeholder="Enter a Phone Number" value="@searchText">
                </div>
                <div class="input-group mx-auto input-group-lg pt-2">
                    <button type="submit" class="btn btn-success btn-block" onclick="displayBusyIndicator()">Search</button>
                    <button class="btn btn-info btn-block" onclick="displayBusyIndicator()" asp-controller="Porting" asp-action="CheckPortability">Transfer</button>
                </div>
            </div>
        </form>
    </div>

    <partial name="_LoadingPartial" />

    @{
        if (!string.IsNullOrWhiteSpace(Model?.Message))
        {
            <div class="alert alert-danger" role="alert">
                @Model?.Message
            </div>
        }
        if (Model != null && Model?.PhoneNumbers?.Length > 0)
        {
            var maxPage = Model.NumberOfResults / 50;
            var pageResultsCount = Model.Page * 50;

            if (Model.CleanQuery.Length == 10 && Model.Query.Length == 3)
            {
                <div class="alert alert-info" role="alert">
                    Area code @Model.CleanQuery.Substring(0, 3) detected.
                </div>
            }

            var total = $"{Model.NumberOfResults} available numbers found!";
            <div class="alert alert-success" role="alert">
                @total
            </div>
            <form action="/Search" class="pb-3">
                <div class="btn-group btn-group-toggle" data-toggle="buttons">
                    @{
                        if (Model?.View == "Sequential")
                        {
                            <a class="btn btn-outline-secondary" onclick="displayBusyIndicator()" href="/Search?Query=@Model.Query&View=Recommended&Page=@Model.Page">Recommended</a>
                            <a class="btn btn-outline-secondary active" onclick="displayBusyIndicator()" href="/Search?Query=@Model.Query&View=Sequential&Page=@Model.Page">Sequential</a>
                        }
                        else
                        {
                            <a class="btn btn-outline-secondary active" onclick="displayBusyIndicator()" href="/Search?Query=@Model.Query&View=Recommended&Page=@Model.Page">Recommended</a>
                            <a class="btn btn-outline-secondary" onclick="displayBusyIndicator()" href="/Search?Query=@Model.Query&View=Sequential&Page=@Model.Page">Sequential</a>
                        }
                    }
                </div>
                <div class="btn-group float-right pt-2 pb-2" role="group" aria-label="pagination">
                    @{
                        if ((Model.NumberOfResults % 50) > 1)
                        {
                            maxPage += 1;
                        }
                        if (Model.Page > 1)
                        {
                            var previousPage = Model.Page - 1;
                            <a class="btn btn-outline-secondary" onclick="displayBusyIndicator()" href="/Search?Query=@Model.Query&View=@Model.View&Page=@previousPage">Previous</a>
                            <a class="btn btn-outline-dark disabled">Page @Model.Page of @maxPage</a>
                        }
                        else
                        {
                            <a class="btn btn-outline-secondary disabled">Previous</a>
                            <a class="btn btn-outline-dark disabled">Page @Model.Page of @maxPage</a>
                        }
                        if (Model.NumberOfResults > pageResultsCount)
                        {
                            var nextPage = Model.Page + 1;
                            <a class="btn btn-outline-secondary" onclick="displayBusyIndicator()" href="/Search?Query=@Model.Query&View=@Model.View&Page=@nextPage">Next</a>
                        }
                        else
                        {
                            <a class="btn btn-outline-secondary disabled">Next</a>
                        }
                    }
                </div>
            </form>
            <div class="table-responsive">
                <table class="table table-striped table-borderless table-hover">
                    <tbody>
                        @{
                            var match = string.Empty;
                            if (Model.CleanQuery != null && Model.CleanQuery.Contains('*'))
                            {
                                match = Model.CleanQuery.Substring(0, Model.CleanQuery.IndexOf('*'));
                            }
                            else
                            {
                                match = Model.CleanQuery;
                            }

                            foreach (var item in Model?.PhoneNumbers)
                            {
                                var location = $"{item?.City ?? "Unknown City"}, {item?.State ?? "Unknown State"}";
                                var formattedNumber = $"({item.NPA}) {item.NXX}-{item.XXXX.ToString("0000")}";
                                var number = item.DialedNumber;

                                if (number.Contains(match))
                                {
                                    var start = item.DialedNumber.IndexOf(match);
                                    var stop = Model.CleanQuery.Length;
                                    var beginning = item.DialedNumber.Substring(0, start);
                                    var middle = (start == 0) && (stop == 10) ? Model.CleanQuery : Model.Query;
                                    var end = item.DialedNumber.Substring(start + stop);
                                    number = $"{beginning}<b class='text-success'>{middle}</b>{end}";
                                }

                                <tr id="@item.DialedNumber">
                                    <td class="d-none d-sm-table-cell">
                                        @{
                                            if (item.NumberType == "Standard")
                                            {
                                                <h4><span class="badge badge-secondary">Standard</span></h4>
                                            }
                                            else if (item.NumberType == "Premium")
                                            {
                                                <h4><span class="badge badge-primary">Premium</span></h4>
                                            }
                                            else if (item.NumberType == "Executive")
                                            {
                                                <h4><span class="badge badge-success">Executive</span></h4>
                                            }
                                        }
                                    </td>
                                    <td scope="row"><h4>@formattedNumber</h4></td>
                                    <td class="d-none d-sm-table-cell">@Html.Raw(number)</td>
                                    <td class="d-none d-sm-table-cell">@location</td>
                                    <td>
                                        @{
                                            if (item.Purchased)
                                            {
                                                <a class="disabled">
                                                    <input type="button" class="btn btn-outline-secondary disabled" value="Already Purchased">
                                                </a>
                                            }
                                            else
                                            {
                                                <a asp-controller="Cart" asp-action="BuyPhoneNumber" asp-route-id="@item.DialedNumber" asp-route-Query="@Model.Query" asp-route-View="@Model.View" asp-route-Page="@Model.Page" target="_top">
                                                    <input type="button" class="btn btn-outline-primary" value="Add to Cart">
                                                </a>
                                            }
                                        }
                                        @{
                                            if (alreadyInCart.TryGetValue(item.DialedNumber, out var _))
                                            {
                                                <a asp-controller="Cart" asp-action="RemovePhoneNumber" asp-route-id="@item.DialedNumber" asp-route-Query="@Model.Query" target="_top">
                                                    <input type="button" class="btn btn-outline-danger" value="Remove">
                                                </a>
                                            }
                                        }
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
                <form action="/Search">
                    <div class="btn-group float-right pb-3" role="group" aria-label="pagination">
                        @{
                            if (Model.Page > 1)
                            {
                                var previousPage = Model.Page - 1;
                                <a class="btn btn-outline-secondary" onclick="displayBusyIndicator()" href="/Search?Query=@Model.Query&View=@Model.View&Page=@previousPage">Previous</a>
                                <a class="btn btn-outline-dark disabled">Page @Model.Page of @maxPage</a>
                            }
                            else
                            {
                                <a class="btn btn-outline-secondary disabled">Previous</a>
                                <a class="btn btn-outline-dark disabled">Page @Model.Page of @maxPage</a>
                            }
                            if (Model.NumberOfResults > pageResultsCount)
                            {
                                var nextPage = Model.Page + 1;
                                <a class="btn btn-outline-secondary" onclick="displayBusyIndicator()" href="/Search?Query=@Model.Query&View=@Model.View&Page=@nextPage">Next</a>
                            }
                            else
                            {
                                <a class="btn btn-outline-secondary disabled">Next</a>
                            }
                        }
                    </div>
                </form>
            </div>
        }
        else if (Model != null && Model?.PhoneNumbers?.Length == 0)
        {
            <div class="alert alert-danger" role="alert">
                No available numbers found!
            </div>
        }
    }
</div>